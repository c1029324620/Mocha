
Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a91  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096f  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c8  00000000  00000000  00001edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  d4:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init_adc>:

unsigned int adc_value;

void init_adc()
{
	ADMUX = (0<<REFS1) |	//AVref
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	(1<<REFS0) |
	(1<<ADLAR) |	//Left justified
	(0<<MUX2)  |	//ADC0 channel 0
	(0<<MUX1)  |
	(0<<MUX0);
	ADCSRA = (1<<ADEN) |	//Enable ADC
  e2:	87 e8       	ldi	r24, 0x87	; 135
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <read_adc>:
	(1<<ADPS0);
}

void read_adc()
{
	ADCSRA |= (1 << ADSC);		//enable start conversion
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	while(ADCSRA & (1<< ADSC));	//wait
  f4:	80 81       	ld	r24, Z
  f6:	86 fd       	sbrc	r24, 6
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <read_adc+0xa>
	adc_value = ADCH;	// potentiometer value stored in adc_value
  fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 108:	08 95       	ret

0000010a <main>:
}

int main(void)
{
	int Flag = 1;
	init_adc();
 10a:	0e 94 6e 00 	call	0xdc	; 0xdc <init_adc>
	DDRD |= (1<< DDRD4) | (1<< DDRD5) | (1<< DDRD6);	//make PD4,PD5, and PD6 as outputs.
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	80 67       	ori	r24, 0x70	; 112
 112:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1<< COM0A1) | (1<<WGM01) | (1<< WGM00); //non-inverting and fast PWM
 114:	84 b5       	in	r24, 0x24	; 36
 116:	83 68       	ori	r24, 0x83	; 131
 118:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<< CS00);		//no prescaler.
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 bd       	out	0x25, r24	; 37
	adc_value = ADCH;	// potentiometer value stored in adc_value
}

int main(void)
{
	int Flag = 1;
 120:	c1 e0       	ldi	r28, 0x01	; 1
 122:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR0B |= (1<< CS00);		//no prescaler.
	/* Replace with your application code */
	while (1)
	{
		read_adc();
		OCR0A = adc_value;		//duty cycle are based on the adc value read.
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	11 e0       	ldi	r17, 0x01	; 1
		else
		{
			PORTD&=~(1<<DDD5);// CCW Direction Set
			PORTD|=(1<<DDD4);// CCW Direction Set
			_delay_ms(5000);
			Flag = 1;
 128:	ee 24       	eor	r14, r14
 12a:	e3 94       	inc	r14
 12c:	f1 2c       	mov	r15, r1
		if(Flag == 1)
		{
			PORTD|=(1<<DDD5);// CW Direction Set
			PORTD&=~(1<<DDD4);// CW Direction Set
			_delay_ms(5000);
			Flag = 0;
 12e:	c1 2c       	mov	r12, r1
 130:	d1 2c       	mov	r13, r1
	TCCR0A |= (1<< COM0A1) | (1<<WGM01) | (1<< WGM00); //non-inverting and fast PWM
	TCCR0B |= (1<< CS00);		//no prescaler.
	/* Replace with your application code */
	while (1)
	{
		read_adc();
 132:	0e 94 75 00 	call	0xea	; 0xea <read_adc>
		OCR0A = adc_value;		//duty cycle are based on the adc value read.
 136:	f8 01       	movw	r30, r16
 138:	80 81       	ld	r24, Z
 13a:	87 bd       	out	0x27, r24	; 39
		if(Flag == 1)
 13c:	21 97       	sbiw	r28, 0x01	; 1
 13e:	71 f4       	brne	.+28     	; 0x15c <main+0x52>
		{
			PORTD|=(1<<DDD5);// CW Direction Set
 140:	5d 9a       	sbi	0x0b, 5	; 11
			PORTD&=~(1<<DDD4);// CW Direction Set
 142:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	ff ef       	ldi	r31, 0xFF	; 255
 146:	23 e2       	ldi	r18, 0x23	; 35
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	f1 50       	subi	r31, 0x01	; 1
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x40>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x4a>
 154:	00 00       	nop
			_delay_ms(5000);
			Flag = 0;
 156:	cc 2d       	mov	r28, r12
 158:	dd 2d       	mov	r29, r13
 15a:	eb cf       	rjmp	.-42     	; 0x132 <main+0x28>
		}
		else
		{
			PORTD&=~(1<<DDD5);// CCW Direction Set
 15c:	5d 98       	cbi	0x0b, 5	; 11
			PORTD|=(1<<DDD4);// CCW Direction Set
 15e:	5c 9a       	sbi	0x0b, 4	; 11
 160:	ff ef       	ldi	r31, 0xFF	; 255
 162:	23 e2       	ldi	r18, 0x23	; 35
 164:	84 ef       	ldi	r24, 0xF4	; 244
 166:	f1 50       	subi	r31, 0x01	; 1
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x5c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x66>
 170:	00 00       	nop
			_delay_ms(5000);
			Flag = 1;
 172:	ce 2d       	mov	r28, r14
 174:	df 2d       	mov	r29, r15
 176:	dd cf       	rjmp	.-70     	; 0x132 <main+0x28>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
