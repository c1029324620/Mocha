
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3b  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094a  00000000  00000000  00000c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <util/delay.h>

int main(void)
{
	int Flag;
	DDRD |= (1<< DDRD4) | (1<< DDRD5) | (1<< DDRD6);	//make PD4,PD5, and PD6 as outputs.	
  cc:	2a b1       	in	r18, 0x0a	; 10
  ce:	20 67       	ori	r18, 0x70	; 112
  d0:	2a b9       	out	0x0a, r18	; 10
	OCR0A = 128;		//50% duty cycle
  d2:	20 e8       	ldi	r18, 0x80	; 128
  d4:	27 bd       	out	0x27, r18	; 39
	TCCR0A |= (1<< COM0A1) | (1<<WGM01) | (1<< WGM00); //non-inverting and fast PWM 
  d6:	24 b5       	in	r18, 0x24	; 36
  d8:	23 68       	ori	r18, 0x83	; 131
  da:	24 bd       	out	0x24, r18	; 36
	TCCR0B |= (1<< CS00);		//no prescaler.
  dc:	25 b5       	in	r18, 0x25	; 37
  de:	21 60       	ori	r18, 0x01	; 1
  e0:	25 bd       	out	0x25, r18	; 37
		else
		{
			PORTD&=~(1<<DDD5);// CCW Direction Set
			PORTD|=(1<<DDD4);// CCW Direction Set
			_delay_ms(5000);
			Flag = 1;
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	20 e0       	ldi	r18, 0x00	; 0
		if(Flag == 1)
		{
			PORTD|=(1<<DDD5);// CW Direction Set
			PORTD&=~(1<<DDD4);// CW Direction Set
			_delay_ms(5000);
			Flag = 0;
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	40 e0       	ldi	r20, 0x00	; 0
	TCCR0A |= (1<< COM0A1) | (1<<WGM01) | (1<< WGM00); //non-inverting and fast PWM 
	TCCR0B |= (1<< CS00);		//no prescaler.
    /* Replace with your application code */
    while (1) 
    {
		if(Flag == 1)
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	71 f4       	brne	.+28     	; 0x10a <main+0x3e>
		{
			PORTD|=(1<<DDD5);// CW Direction Set
  ee:	5d 9a       	sbi	0x0b, 5	; 11
			PORTD&=~(1<<DDD4);// CW Direction Set
  f0:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	6f ef       	ldi	r22, 0xFF	; 255
  f4:	83 e2       	ldi	r24, 0x23	; 35
  f6:	94 ef       	ldi	r25, 0xF4	; 244
  f8:	61 50       	subi	r22, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x2c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x36>
 102:	00 00       	nop
			_delay_ms(5000);
			Flag = 0;
 104:	85 2f       	mov	r24, r21
 106:	94 2f       	mov	r25, r20
 108:	f0 cf       	rjmp	.-32     	; 0xea <main+0x1e>
		}
		else
		{
			PORTD&=~(1<<DDD5);// CCW Direction Set
 10a:	5d 98       	cbi	0x0b, 5	; 11
			PORTD|=(1<<DDD4);// CCW Direction Set
 10c:	5c 9a       	sbi	0x0b, 4	; 11
 10e:	6f ef       	ldi	r22, 0xFF	; 255
 110:	83 e2       	ldi	r24, 0x23	; 35
 112:	94 ef       	ldi	r25, 0xF4	; 244
 114:	61 50       	subi	r22, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x48>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x52>
 11e:	00 00       	nop
			_delay_ms(5000);
			Flag = 1;
 120:	83 2f       	mov	r24, r19
 122:	92 2f       	mov	r25, r18
 124:	e2 cf       	rjmp	.-60     	; 0xea <main+0x1e>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
