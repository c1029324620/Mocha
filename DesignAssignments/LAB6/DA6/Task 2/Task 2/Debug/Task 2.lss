
Task 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001b96  00001c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080011a  0080011a  00001c44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001332  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb4  00000000  00000000  000030ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092d  00000000  00000000  00003c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000045cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000663  00000000  00000000  00004814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077c  00000000  00000000  00004e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000055f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      4c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      54:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      58:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      5c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      60:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      64:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      68:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      6c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      70:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      74:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      78:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      7c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      80:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      84:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      88:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      8c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      90:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      94:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      98:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      9c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      a0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      a4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      a8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      ac:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      b0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 00       	.word	0x003f	; ????

000000e2 <__trampolines_end>:
      e2:	00 40       	sbci	r16, 0x00	; 0
      e4:	7a 10       	cpse	r7, r10
      e6:	f3 5a       	subi	r31, 0xA3	; 163
      e8:	00 a0       	ldd	r0, Z+32	; 0x20
      ea:	72 4e       	sbci	r23, 0xE2	; 226
      ec:	18 09       	sbc	r17, r8
      ee:	00 10       	cpse	r0, r0
      f0:	a5 d4       	rcall	.+2378   	; 0xa3c <USART_Init+0x1c>
      f2:	e8 00       	.word	0x00e8	; ????
      f4:	00 e8       	ldi	r16, 0x80	; 128
      f6:	76 48       	sbci	r23, 0x86	; 134
      f8:	17 00       	.word	0x0017	; ????
      fa:	00 e4       	ldi	r16, 0x40	; 64
      fc:	0b 54       	subi	r16, 0x4B	; 75
      fe:	02 00       	.word	0x0002	; ????
     100:	00 ca       	rjmp	.-3072   	; 0xfffff502 <__eeprom_end+0xff7ef502>
     102:	9a 3b       	cpi	r25, 0xBA	; 186
     104:	00 00       	nop
     106:	00 e1       	ldi	r16, 0x10	; 16
     108:	f5 05       	cpc	r31, r5
     10a:	00 00       	nop
     10c:	80 96       	adiw	r24, 0x20	; 32
     10e:	98 00       	.word	0x0098	; ????
     110:	00 00       	nop
     112:	40 42       	sbci	r20, 0x20	; 32
     114:	0f 00       	.word	0x000f	; ????
     116:	00 00       	nop
     118:	a0 86       	std	Z+8, r10	; 0x08
     11a:	01 00       	.word	0x0001	; ????
     11c:	00 00       	nop
     11e:	10 27       	eor	r17, r16
     120:	00 00       	nop
     122:	00 00       	nop
     124:	e8 03       	fmulsu	r22, r16
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	64 00       	.word	0x0064	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	0a 00       	.word	0x000a	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	01 00       	.word	0x0001	; ????
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	2c 76       	andi	r18, 0x6C	; 108
     13e:	d8 88       	ldd	r13, Y+16	; 0x10
     140:	dc 67       	ori	r29, 0x7C	; 124
     142:	4f 08       	sbc	r4, r15
     144:	23 df       	rcall	.-442    	; 0xffffff8c <__eeprom_end+0xff7eff8c>
     146:	c1 df       	rcall	.-126    	; 0xca <__SREG__+0x8b>
     148:	ae 59       	subi	r26, 0x9E	; 158
     14a:	e1 b1       	in	r30, 0x01	; 1
     14c:	b7 96       	adiw	r30, 0x27	; 39
     14e:	e5 e3       	ldi	r30, 0x35	; 53
     150:	e4 53       	subi	r30, 0x34	; 52
     152:	c6 3a       	cpi	r28, 0xA6	; 166
     154:	e6 51       	subi	r30, 0x16	; 22
     156:	99 76       	andi	r25, 0x69	; 105
     158:	96 e8       	ldi	r25, 0x86	; 134
     15a:	e6 c2       	rjmp	.+1484   	; 0x728 <ComplementaryFilter+0xac>
     15c:	84 26       	eor	r8, r20
     15e:	eb 89       	ldd	r30, Y+19	; 0x13
     160:	8c 9b       	sbis	0x11, 4	; 17
     162:	62 ed       	ldi	r22, 0xD2	; 210
     164:	40 7c       	andi	r20, 0xC0	; 192
     166:	6f fc       	.word	0xfc6f	; ????
     168:	ef bc       	out	0x2f, r14	; 47
     16a:	9c 9f       	mul	r25, r28
     16c:	40 f2       	brcs	.-112    	; 0xfe <__trampolines_end+0x1c>
     16e:	ba a5       	ldd	r27, Y+42	; 0x2a
     170:	6f a5       	ldd	r22, Y+47	; 0x2f
     172:	f4 90       	lpm	r15, Z
     174:	05 5a       	subi	r16, 0xA5	; 165
     176:	2a f7       	brpl	.-54     	; 0x142 <__trampolines_end+0x60>
     178:	5c 93       	st	X, r21
     17a:	6b 6c       	ori	r22, 0xCB	; 203
     17c:	f9 67       	ori	r31, 0x79	; 121
     17e:	6d c1       	rjmp	.+730    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     180:	1b fc       	.word	0xfc1b	; ????
     182:	e0 e4       	ldi	r30, 0x40	; 64
     184:	0d 47       	sbci	r16, 0x7D	; 125
     186:	fe f5       	brtc	.+126    	; 0x206 <.do_clear_bss_loop>
     188:	20 e6       	ldi	r18, 0x60	; 96
     18a:	b5 00       	.word	0x00b5	; ????
     18c:	d0 ed       	ldi	r29, 0xD0	; 208
     18e:	90 2e       	mov	r9, r16
     190:	03 00       	.word	0x0003	; ????
     192:	94 35       	cpi	r25, 0x54	; 84
     194:	77 05       	cpc	r23, r7
     196:	00 80       	ld	r0, Z
     198:	84 1e       	adc	r8, r20
     19a:	08 00       	.word	0x0008	; ????
     19c:	00 20       	and	r0, r0
     19e:	4e 0a       	sbc	r4, r30
     1a0:	00 00       	nop
     1a2:	00 c8       	rjmp	.-4096   	; 0xfffff1a4 <__eeprom_end+0xff7ef1a4>
     1a4:	0c 33       	cpi	r16, 0x3C	; 60
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	33 0f       	add	r19, r19
     1aa:	98 6e       	ori	r25, 0xE8	; 232
     1ac:	12 83       	std	Z+2, r17	; 0x02
     1ae:	11 41       	sbci	r17, 0x11	; 17
     1b0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b2:	21 14       	cp	r2, r1
     1b4:	89 3b       	cpi	r24, 0xB9	; 185
     1b6:	e6 55       	subi	r30, 0x56	; 86
     1b8:	16 cf       	rjmp	.-468    	; 0xffffffe6 <__eeprom_end+0xff7effe6>
     1ba:	fe e6       	ldi	r31, 0x6E	; 110
     1bc:	db 18       	sub	r13, r11
     1be:	d1 84       	ldd	r13, Z+9	; 0x09
     1c0:	4b 38       	cpi	r20, 0x8B	; 139
     1c2:	1b f7       	brvc	.-58     	; 0x18a <__trampolines_end+0xa8>
     1c4:	7c 1d       	adc	r23, r12
     1c6:	90 1d       	adc	r25, r0
     1c8:	a4 bb       	out	0x14, r26	; 20
     1ca:	e4 24       	eor	r14, r4
     1cc:	20 32       	cpi	r18, 0x20	; 32
     1ce:	84 72       	andi	r24, 0x24	; 36
     1d0:	5e 22       	and	r5, r30
     1d2:	81 00       	.word	0x0081	; ????
     1d4:	c9 f1       	breq	.+114    	; 0x248 <I2C_Repeated_Start+0x22>
     1d6:	24 ec       	ldi	r18, 0xC4	; 196
     1d8:	a1 e5       	ldi	r26, 0x51	; 81
     1da:	3d 27       	eor	r19, r29

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	d8 e0       	ldi	r29, 0x08	; 8
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	e6 e9       	ldi	r30, 0x96	; 150
     1f0:	fb e1       	ldi	r31, 0x1B	; 27
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	aa 31       	cpi	r26, 0x1A	; 26
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	21 e0       	ldi	r18, 0x01	; 1
     200:	aa e1       	ldi	r26, 0x1A	; 26
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	ae 33       	cpi	r26, 0x3E	; 62
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <main>
     212:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     21a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     21e:	88 e4       	ldi	r24, 0x48	; 72
     220:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     224:	08 95       	ret

00000226 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     226:	94 ea       	ldi	r25, 0xA4	; 164
     228:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     22c:	ec eb       	ldi	r30, 0xBC	; 188
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	90 81       	ld	r25, Z
     232:	99 23       	and	r25, r25
     234:	ec f7       	brge	.-6      	; 0x230 <I2C_Repeated_Start+0xa>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
     236:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     23a:	98 7f       	andi	r25, 0xF8	; 248
     23c:	90 31       	cpi	r25, 0x10	; 16
     23e:	99 f4       	brne	.+38     	; 0x266 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR0 = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     244:	84 e8       	ldi	r24, 0x84	; 132
     246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     24a:	ec eb       	ldi	r30, 0xBC	; 188
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 23       	and	r24, r24
     252:	ec f7       	brge	.-6      	; 0x24e <I2C_Repeated_Start+0x28>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
     254:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     258:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     25a:	80 34       	cpi	r24, 0x40	; 64
     25c:	31 f0       	breq	.+12     	; 0x26a <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     25e:	80 32       	cpi	r24, 0x20	; 32
     260:	31 f0       	breq	.+12     	; 0x26e <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 95       	ret
	TWDR0 = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     26e:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     270:	08 95       	ret

00000272 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR0=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     272:	84 e9       	ldi	r24, 0x94	; 148
     274:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR0 & (1<<TWSTO));								/* Wait until stop condition execution */
     278:	ec eb       	ldi	r30, 0xBC	; 188
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <I2C_Stop+0xa>
}
     282:	08 95       	ret

00000284 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     284:	bf 92       	push	r11
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     298:	cc eb       	ldi	r28, 0xBC	; 188
     29a:	d0 e0       	ldi	r29, 0x00	; 0
     29c:	0f 2e       	mov	r0, r31
     29e:	f4 ea       	ldi	r31, 0xA4	; 164
     2a0:	df 2e       	mov	r13, r31
     2a2:	f0 2d       	mov	r31, r0
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
     2a4:	09 eb       	ldi	r16, 0xB9	; 185
     2a6:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR0 = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     2a8:	0f 2e       	mov	r0, r31
     2aa:	fb eb       	ldi	r31, 0xBB	; 187
     2ac:	ef 2e       	mov	r14, r31
     2ae:	f1 2c       	mov	r15, r1
     2b0:	f0 2d       	mov	r31, r0
		TWCR0 = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2b2:	0f 2e       	mov	r0, r31
     2b4:	f4 e8       	ldi	r31, 0x84	; 132
     2b6:	cf 2e       	mov	r12, r31
     2b8:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2ba:	d8 82       	st	Y, r13
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     2bc:	88 81       	ld	r24, Y
     2be:	88 23       	and	r24, r24
     2c0:	ec f7       	brge	.-6      	; 0x2bc <I2C_Start_Wait+0x38>
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
     2c2:	f8 01       	movw	r30, r16
     2c4:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     2c6:	88 7f       	andi	r24, 0xF8	; 248
     2c8:	88 30       	cpi	r24, 0x08	; 8
     2ca:	b9 f7       	brne	.-18     	; 0x2ba <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR0 = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     2cc:	f7 01       	movw	r30, r14
     2ce:	b0 82       	st	Z, r11
		TWCR0 = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2d0:	c8 82       	st	Y, r12
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     2d2:	88 81       	ld	r24, Y
     2d4:	88 23       	and	r24, r24
     2d6:	ec f7       	brge	.-6      	; 0x2d2 <I2C_Start_Wait+0x4e>
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
     2d8:	f8 01       	movw	r30, r16
     2da:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     2dc:	88 7f       	andi	r24, 0xF8	; 248
     2de:	88 31       	cpi	r24, 0x18	; 24
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
     2e2:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>
			continue;										/* continue with start loop again */
     2e6:	e9 cf       	rjmp	.-46     	; 0x2ba <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	df 90       	pop	r13
     2f6:	cf 90       	pop	r12
     2f8:	bf 90       	pop	r11
     2fa:	08 95       	ret

000002fc <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR0 = data;											/* Copy data in TWI data register */
     2fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     300:	84 e8       	ldi	r24, 0x84	; 132
     302:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     306:	ec eb       	ldi	r30, 0xBC	; 188
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	88 23       	and	r24, r24
     30e:	ec f7       	brge	.-6      	; 0x30a <I2C_Write+0xe>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
     310:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     314:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     316:	88 32       	cpi	r24, 0x28	; 40
     318:	21 f0       	breq	.+8      	; 0x322 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     31a:	80 33       	cpi	r24, 0x30	; 48
     31c:	21 f0       	breq	.+8      	; 0x326 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	08 95       	ret
	TWDR0 = data;											/* Copy data in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     326:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     328:	08 95       	ret

0000032a <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     32a:	84 ec       	ldi	r24, 0xC4	; 196
     32c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     330:	ec eb       	ldi	r30, 0xBC	; 188
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	88 23       	and	r24, r24
     338:	ec f7       	brge	.-6      	; 0x334 <I2C_Read_Ack+0xa>
	return TWDR0;											/* Return received data */
     33a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
     33e:	08 95       	ret

00000340 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     340:	84 e8       	ldi	r24, 0x84	; 132
     342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     346:	ec eb       	ldi	r30, 0xBC	; 188
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	88 23       	and	r24, r24
     34e:	ec f7       	brge	.-6      	; 0x34a <I2C_Read_Nack+0xa>
	return TWDR0;
     350:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     354:	08 95       	ret

00000356 <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     356:	2f ef       	ldi	r18, 0xFF	; 255
     358:	82 e5       	ldi	r24, 0x52	; 82
     35a:	97 e0       	ldi	r25, 0x07	; 7
     35c:	21 50       	subi	r18, 0x01	; 1
     35e:	80 40       	sbci	r24, 0x00	; 0
     360:	90 40       	sbci	r25, 0x00	; 0
     362:	e1 f7       	brne	.-8      	; 0x35c <MPU6050_Init+0x6>
     364:	00 c0       	rjmp	.+0      	; 0x366 <MPU6050_Init+0x10>
     366:	00 00       	nop


void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     368:	80 ed       	ldi	r24, 0xD0	; 208
     36a:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     36e:	89 e1       	ldi	r24, 0x19	; 25
     370:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     374:	87 e0       	ldi	r24, 0x07	; 7
     376:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Stop();
     37a:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     37e:	80 ed       	ldi	r24, 0xD0	; 208
     380:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     384:	8b e6       	ldi	r24, 0x6B	; 107
     386:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Stop();
     390:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     394:	80 ed       	ldi	r24, 0xD0	; 208
     396:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     39a:	8a e1       	ldi	r24, 0x1A	; 26
     39c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Stop();
     3a6:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3aa:	80 ed       	ldi	r24, 0xD0	; 208
     3ac:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3b0:	8b e1       	ldi	r24, 0x1B	; 27
     3b2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3b6:	88 e1       	ldi	r24, 0x18	; 24
     3b8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Stop();
     3bc:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3c0:	80 ed       	ldi	r24, 0xD0	; 208
     3c2:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     3c6:	88 e3       	ldi	r24, 0x38	; 56
     3c8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Write(0x01);
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Stop();
     3d2:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>
     3d6:	08 95       	ret

000003d8 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     3d8:	80 ed       	ldi	r24, 0xD0	; 208
     3da:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     3de:	8b e3       	ldi	r24, 0x3B	; 59
     3e0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     3e4:	81 ed       	ldi	r24, 0xD1	; 209
     3e6:	0e 94 13 01 	call	0x226	; 0x226 <I2C_Repeated_Start>
     3ea:	08 95       	ret

000003ec <Read_RawValue>:
}

void Read_RawValue()
{
     3ec:	cf 93       	push	r28
	MPU_Start_Loc();									/* Read Gyro values */
     3ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3f2:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     3f6:	c8 2f       	mov	r28, r24
     3f8:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     3fc:	6c 2f       	mov	r22, r28
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	76 2f       	mov	r23, r22
     402:	66 27       	eor	r22, r22
     404:	68 2b       	or	r22, r24
     406:	07 2e       	mov	r0, r23
     408:	00 0c       	add	r0, r0
     40a:	88 0b       	sbc	r24, r24
     40c:	99 0b       	sbc	r25, r25
     40e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     412:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <Acc_x>
     416:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <Acc_x+0x1>
     41a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Acc_x+0x2>
     41e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     422:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     426:	c8 2f       	mov	r28, r24
     428:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     42c:	6c 2f       	mov	r22, r28
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	76 2f       	mov	r23, r22
     432:	66 27       	eor	r22, r22
     434:	68 2b       	or	r22, r24
     436:	07 2e       	mov	r0, r23
     438:	00 0c       	add	r0, r0
     43a:	88 0b       	sbc	r24, r24
     43c:	99 0b       	sbc	r25, r25
     43e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     442:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <Acc_y>
     446:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <Acc_y+0x1>
     44a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Acc_y+0x2>
     44e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     452:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     456:	c8 2f       	mov	r28, r24
     458:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     45c:	6c 2f       	mov	r22, r28
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	76 2f       	mov	r23, r22
     462:	66 27       	eor	r22, r22
     464:	68 2b       	or	r22, r24
     466:	07 2e       	mov	r0, r23
     468:	00 0c       	add	r0, r0
     46a:	88 0b       	sbc	r24, r24
     46c:	99 0b       	sbc	r25, r25
     46e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     472:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end>
     476:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x1>
     47a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x2>
     47e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     482:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     486:	c8 2f       	mov	r28, r24
     488:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     48c:	6c 2f       	mov	r22, r28
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	76 2f       	mov	r23, r22
     492:	66 27       	eor	r22, r22
     494:	68 2b       	or	r22, r24
     496:	07 2e       	mov	r0, r23
     498:	00 0c       	add	r0, r0
     49a:	88 0b       	sbc	r24, r24
     49c:	99 0b       	sbc	r25, r25
     49e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     4a2:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <Temperature>
     4a6:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <Temperature+0x1>
     4aa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Temperature+0x2>
     4ae:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4b2:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     4b6:	c8 2f       	mov	r28, r24
     4b8:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     4bc:	6c 2f       	mov	r22, r28
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	76 2f       	mov	r23, r22
     4c2:	66 27       	eor	r22, r22
     4c4:	68 2b       	or	r22, r24
     4c6:	07 2e       	mov	r0, r23
     4c8:	00 0c       	add	r0, r0
     4ca:	88 0b       	sbc	r24, r24
     4cc:	99 0b       	sbc	r25, r25
     4ce:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     4d2:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <Gyro_x>
     4d6:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <Gyro_x+0x1>
     4da:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Gyro_x+0x2>
     4de:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4e2:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     4e6:	c8 2f       	mov	r28, r24
     4e8:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     4ec:	6c 2f       	mov	r22, r28
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	76 2f       	mov	r23, r22
     4f2:	66 27       	eor	r22, r22
     4f4:	68 2b       	or	r22, r24
     4f6:	07 2e       	mov	r0, r23
     4f8:	00 0c       	add	r0, r0
     4fa:	88 0b       	sbc	r24, r24
     4fc:	99 0b       	sbc	r25, r25
     4fe:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     502:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <Gyro_y>
     506:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <Gyro_y+0x1>
     50a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Gyro_y+0x2>
     50e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     512:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_Read_Ack>
     516:	c8 2f       	mov	r28, r24
     518:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_Read_Nack>
     51c:	6c 2f       	mov	r22, r28
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	76 2f       	mov	r23, r22
     522:	66 27       	eor	r22, r22
     524:	68 2b       	or	r22, r24
     526:	07 2e       	mov	r0, r23
     528:	00 0c       	add	r0, r0
     52a:	88 0b       	sbc	r24, r24
     52c:	99 0b       	sbc	r25, r25
     52e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     532:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <Gyro_z>
     536:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <Gyro_z+0x1>
     53a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Gyro_z+0x2>
     53e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Gyro_z+0x3>
	I2C_Stop();
     542:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Stop>
}
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <getAngle>:

void getAngle(int Ax, int Ay, int Az)
{
     54a:	4f 92       	push	r4
     54c:	5f 92       	push	r5
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	8f 92       	push	r8
     554:	9f 92       	push	r9
     556:	af 92       	push	r10
     558:	bf 92       	push	r11
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	00 d0       	rcall	.+0      	; 0x568 <getAngle+0x1e>
     568:	00 d0       	rcall	.+0      	; 0x56a <getAngle+0x20>
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	7b 01       	movw	r14, r22
     570:	3a 01       	movw	r6, r20
	double x = Ax;
     572:	bc 01       	movw	r22, r24
     574:	99 0f       	add	r25, r25
     576:	88 0b       	sbc	r24, r24
     578:	99 0b       	sbc	r25, r25
     57a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     57e:	4b 01       	movw	r8, r22
     580:	5c 01       	movw	r10, r24
	double y = Ay;
     582:	b7 01       	movw	r22, r14
     584:	ff 0c       	add	r15, r15
     586:	88 0b       	sbc	r24, r24
     588:	99 0b       	sbc	r25, r25
     58a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
	double z = Az;
     592:	b3 01       	movw	r22, r6
     594:	77 0c       	add	r7, r7
     596:	88 0b       	sbc	r24, r24
     598:	99 0b       	sbc	r25, r25
     59a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__floatsisf>
	
	pitch = atan(x / sqrt((y*y) + (z*z)));		//pitch calculation
     59e:	9b 01       	movw	r18, r22
     5a0:	ac 01       	movw	r20, r24
     5a2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     5a6:	69 83       	std	Y+1, r22	; 0x01
     5a8:	7a 83       	std	Y+2, r23	; 0x02
     5aa:	8b 83       	std	Y+3, r24	; 0x03
     5ac:	9c 83       	std	Y+4, r25	; 0x04
     5ae:	a7 01       	movw	r20, r14
     5b0:	96 01       	movw	r18, r12
     5b2:	c7 01       	movw	r24, r14
     5b4:	b6 01       	movw	r22, r12
     5b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     5ba:	2b 01       	movw	r4, r22
     5bc:	3c 01       	movw	r6, r24
     5be:	29 81       	ldd	r18, Y+1	; 0x01
     5c0:	3a 81       	ldd	r19, Y+2	; 0x02
     5c2:	4b 81       	ldd	r20, Y+3	; 0x03
     5c4:	5c 81       	ldd	r21, Y+4	; 0x04
     5c6:	c3 01       	movw	r24, r6
     5c8:	b2 01       	movw	r22, r4
     5ca:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
     5ce:	0e 94 12 08 	call	0x1024	; 0x1024 <sqrt>
     5d2:	9b 01       	movw	r18, r22
     5d4:	ac 01       	movw	r20, r24
     5d6:	c5 01       	movw	r24, r10
     5d8:	b4 01       	movw	r22, r8
     5da:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3>
     5de:	0e 94 0b 06 	call	0xc16	; 0xc16 <atan>
     5e2:	2b 01       	movw	r4, r22
     5e4:	3c 01       	movw	r6, r24
	roll = atan(y/ sqrt((x*x) + (z*z)));		//roll calculation
     5e6:	a5 01       	movw	r20, r10
     5e8:	94 01       	movw	r18, r8
     5ea:	c5 01       	movw	r24, r10
     5ec:	b4 01       	movw	r22, r8
     5ee:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     5f2:	29 81       	ldd	r18, Y+1	; 0x01
     5f4:	3a 81       	ldd	r19, Y+2	; 0x02
     5f6:	4b 81       	ldd	r20, Y+3	; 0x03
     5f8:	5c 81       	ldd	r21, Y+4	; 0x04
     5fa:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
     5fe:	0e 94 12 08 	call	0x1024	; 0x1024 <sqrt>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3>
     60e:	0e 94 0b 06 	call	0xc16	; 0xc16 <atan>
     612:	6b 01       	movw	r12, r22
     614:	7c 01       	movw	r14, r24
	
	//converting radians into degrees
	
	pitch = pitch * (180.0 / 3.14);
     616:	23 ea       	ldi	r18, 0xA3	; 163
     618:	3c e4       	ldi	r19, 0x4C	; 76
     61a:	45 e6       	ldi	r20, 0x65	; 101
     61c:	52 e4       	ldi	r21, 0x42	; 66
     61e:	c3 01       	movw	r24, r6
     620:	b2 01       	movw	r22, r4
     622:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     626:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <pitch>
     62a:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <pitch+0x1>
     62e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <pitch+0x2>
     632:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <pitch+0x3>
	roll = roll * (180.0 / 3.14);
     636:	23 ea       	ldi	r18, 0xA3	; 163
     638:	3c e4       	ldi	r19, 0x4C	; 76
     63a:	45 e6       	ldi	r20, 0x65	; 101
     63c:	52 e4       	ldi	r21, 0x42	; 66
     63e:	c7 01       	movw	r24, r14
     640:	b6 01       	movw	r22, r12
     642:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     646:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <roll>
     64a:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <roll+0x1>
     64e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <roll+0x2>
     652:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <roll+0x3>
	
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	9f 90       	pop	r9
     670:	8f 90       	pop	r8
     672:	7f 90       	pop	r7
     674:	6f 90       	pop	r6
     676:	5f 90       	pop	r5
     678:	4f 90       	pop	r4
     67a:	08 95       	ret

0000067c <ComplementaryFilter>:

void ComplementaryFilter()
{
     67c:	4f 92       	push	r4
     67e:	5f 92       	push	r5
     680:	6f 92       	push	r6
     682:	7f 92       	push	r7
     684:	8f 92       	push	r8
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	2a 97       	sbiw	r28, 0x0a	; 10
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	float pitchAcc, rollAcc;
	// Integrate the gyroscope data -> int(angularSpeed) = angle
	pitch += ((float)Gyro_x / GYROSCOPE_SENSITIVITY) * dt;
     6a8:	23 e3       	ldi	r18, 0x33	; 51
     6aa:	33 e3       	ldi	r19, 0x33	; 51
     6ac:	43 e8       	ldi	r20, 0x83	; 131
     6ae:	51 e4       	ldi	r21, 0x41	; 65
     6b0:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <Gyro_x>
     6b4:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <Gyro_x+0x1>
     6b8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Gyro_x+0x2>
     6bc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Gyro_x+0x3>
     6c0:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3>
     6c4:	2a e0       	ldi	r18, 0x0A	; 10
     6c6:	37 ed       	ldi	r19, 0xD7	; 215
     6c8:	43 e2       	ldi	r20, 0x23	; 35
     6ca:	5c e3       	ldi	r21, 0x3C	; 60
     6cc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     6d0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <pitch>
     6d4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <pitch+0x1>
     6d8:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <pitch+0x2>
     6dc:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <pitch+0x3>
     6e0:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
     6e4:	4b 01       	movw	r8, r22
     6e6:	5c 01       	movw	r10, r24
     6e8:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <pitch>
     6ec:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <pitch+0x1>
     6f0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <pitch+0x2>
     6f4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <pitch+0x3>
	// Angle around the X-axis
	roll -= ((float)Gyro_y / GYROSCOPE_SENSITIVITY) * dt;
     6f8:	23 e3       	ldi	r18, 0x33	; 51
     6fa:	33 e3       	ldi	r19, 0x33	; 51
     6fc:	43 e8       	ldi	r20, 0x83	; 131
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <Gyro_y>
     704:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <Gyro_y+0x1>
     708:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Gyro_y+0x2>
     70c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Gyro_y+0x3>
     710:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3>
     714:	2a e0       	ldi	r18, 0x0A	; 10
     716:	37 ed       	ldi	r19, 0xD7	; 215
     718:	43 e2       	ldi	r20, 0x23	; 35
     71a:	5c e3       	ldi	r21, 0x3C	; 60
     71c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <roll>
     728:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <roll+0x1>
     72c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <roll+0x2>
     730:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <roll+0x3>
     734:	0e 94 5b 05 	call	0xab6	; 0xab6 <__subsf3>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <roll>
     744:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <roll+0x1>
     748:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <roll+0x2>
     74c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <roll+0x3>
	// Angle around the Y-axis
	// Compensate for drift with accelerometer data if !bullshit
	// Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
	int forceMagnitudeApprox = abs(Acc_x) + abs(Acc_y) + abs(Acc_z);
     750:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Acc_x>
     754:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Acc_x+0x1>
     758:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <Acc_x+0x2>
     75c:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <Acc_x+0x3>
     760:	8d 83       	std	Y+5, r24	; 0x05
     762:	9e 83       	std	Y+6, r25	; 0x06
     764:	af 83       	std	Y+7, r26	; 0x07
     766:	b8 87       	std	Y+8, r27	; 0x08
     768:	40 90 26 01 	lds	r4, 0x0126	; 0x800126 <Acc_y>
     76c:	50 90 27 01 	lds	r5, 0x0127	; 0x800127 <Acc_y+0x1>
     770:	60 90 28 01 	lds	r6, 0x0128	; 0x800128 <Acc_y+0x2>
     774:	70 90 29 01 	lds	r7, 0x0129	; 0x800129 <Acc_y+0x3>
     778:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <__data_end>
     77c:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <__data_end+0x1>
     780:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <__data_end+0x2>
     784:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <__data_end+0x3>
	if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fixsfsi>
     790:	7a 87       	std	Y+10, r23	; 0x0a
     792:	69 87       	std	Y+9, r22	; 0x09
     794:	db 01       	movw	r26, r22
     796:	bb 23       	and	r27, r27
     798:	34 f4       	brge	.+12     	; 0x7a6 <ComplementaryFilter+0x12a>
     79a:	22 27       	eor	r18, r18
     79c:	33 27       	eor	r19, r19
     79e:	26 1b       	sub	r18, r22
     7a0:	37 0b       	sbc	r19, r23
     7a2:	3a 87       	std	Y+10, r19	; 0x0a
     7a4:	29 87       	std	Y+9, r18	; 0x09
     7a6:	c3 01       	movw	r24, r6
     7a8:	b2 01       	movw	r22, r4
     7aa:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fixsfsi>
     7ae:	9b 01       	movw	r18, r22
     7b0:	77 23       	and	r23, r23
     7b2:	24 f4       	brge	.+8      	; 0x7bc <ComplementaryFilter+0x140>
     7b4:	22 27       	eor	r18, r18
     7b6:	33 27       	eor	r19, r19
     7b8:	26 1b       	sub	r18, r22
     7ba:	37 0b       	sbc	r19, r23
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	82 0f       	add	r24, r18
     7c2:	93 1f       	adc	r25, r19
     7c4:	9a 87       	std	Y+10, r25	; 0x0a
     7c6:	89 87       	std	Y+9, r24	; 0x09
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fixsfsi>
     7d0:	9b 01       	movw	r18, r22
     7d2:	77 23       	and	r23, r23
     7d4:	24 f4       	brge	.+8      	; 0x7de <ComplementaryFilter+0x162>
     7d6:	22 27       	eor	r18, r18
     7d8:	33 27       	eor	r19, r19
     7da:	26 1b       	sub	r18, r22
     7dc:	37 0b       	sbc	r19, r23
     7de:	a9 85       	ldd	r26, Y+9	; 0x09
     7e0:	ba 85       	ldd	r27, Y+10	; 0x0a
     7e2:	a2 0f       	add	r26, r18
     7e4:	b3 1f       	adc	r27, r19
     7e6:	a1 30       	cpi	r26, 0x01	; 1
     7e8:	b0 42       	sbci	r27, 0x20	; 32
     7ea:	0c f4       	brge	.+2      	; 0x7ee <ComplementaryFilter+0x172>
     7ec:	64 c0       	rjmp	.+200    	; 0x8b6 <ComplementaryFilter+0x23a>
	{
		// Turning around the X axis results in a vector on the Y-axis
		pitchAcc = atan2f((float)Acc_y, (float)Acc_z) * 180 / M_PI;
     7ee:	a7 01       	movw	r20, r14
     7f0:	96 01       	movw	r18, r12
     7f2:	c3 01       	movw	r24, r6
     7f4:	b2 01       	movw	r22, r4
     7f6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <atan2>
		pitch = pitch * 0.98 + pitchAcc * 0.02;
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	44 e3       	ldi	r20, 0x34	; 52
     800:	53 e4       	ldi	r21, 0x43	; 67
     802:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     806:	2b ed       	ldi	r18, 0xDB	; 219
     808:	3f e0       	ldi	r19, 0x0F	; 15
     80a:	49 e4       	ldi	r20, 0x49	; 73
     80c:	50 e4       	ldi	r21, 0x40	; 64
     80e:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3>
     812:	2a e0       	ldi	r18, 0x0A	; 10
     814:	37 ed       	ldi	r19, 0xD7	; 215
     816:	43 ea       	ldi	r20, 0xA3	; 163
     818:	5c e3       	ldi	r21, 0x3C	; 60
     81a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     81e:	2b 01       	movw	r4, r22
     820:	3c 01       	movw	r6, r24
     822:	28 e4       	ldi	r18, 0x48	; 72
     824:	31 ee       	ldi	r19, 0xE1	; 225
     826:	4a e7       	ldi	r20, 0x7A	; 122
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	c5 01       	movw	r24, r10
     82c:	b4 01       	movw	r22, r8
     82e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     832:	9b 01       	movw	r18, r22
     834:	ac 01       	movw	r20, r24
     836:	c3 01       	movw	r24, r6
     838:	b2 01       	movw	r22, r4
     83a:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
     83e:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <pitch>
     842:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <pitch+0x1>
     846:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <pitch+0x2>
     84a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <pitch+0x3>
		// Turning around the Y axis results in a vector on the X-axis
		rollAcc = atan2f((float)Acc_x, (float)Acc_z) * 180 / M_PI;
     84e:	a7 01       	movw	r20, r14
     850:	96 01       	movw	r18, r12
     852:	6d 81       	ldd	r22, Y+5	; 0x05
     854:	7e 81       	ldd	r23, Y+6	; 0x06
     856:	8f 81       	ldd	r24, Y+7	; 0x07
     858:	98 85       	ldd	r25, Y+8	; 0x08
     85a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <atan2>
		roll = roll * 0.98 + rollAcc * 0.02;
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	44 e3       	ldi	r20, 0x34	; 52
     864:	53 e4       	ldi	r21, 0x43	; 67
     866:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     86a:	2b ed       	ldi	r18, 0xDB	; 219
     86c:	3f e0       	ldi	r19, 0x0F	; 15
     86e:	49 e4       	ldi	r20, 0x49	; 73
     870:	50 e4       	ldi	r21, 0x40	; 64
     872:	0e 94 3a 06 	call	0xc74	; 0xc74 <__divsf3>
     876:	2a e0       	ldi	r18, 0x0A	; 10
     878:	37 ed       	ldi	r19, 0xD7	; 215
     87a:	43 ea       	ldi	r20, 0xA3	; 163
     87c:	5c e3       	ldi	r21, 0x3C	; 60
     87e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     882:	4b 01       	movw	r8, r22
     884:	5c 01       	movw	r10, r24
     886:	28 e4       	ldi	r18, 0x48	; 72
     888:	31 ee       	ldi	r19, 0xE1	; 225
     88a:	4a e7       	ldi	r20, 0x7A	; 122
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	69 81       	ldd	r22, Y+1	; 0x01
     890:	7a 81       	ldd	r23, Y+2	; 0x02
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	9c 81       	ldd	r25, Y+4	; 0x04
     896:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulsf3>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
     8a6:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <roll>
     8aa:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <roll+0x1>
     8ae:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <roll+0x2>
     8b2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <roll+0x3>
	}
}
     8b6:	2a 96       	adiw	r28, 0x0a	; 10
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
     8da:	5f 90       	pop	r5
     8dc:	4f 90       	pop	r4
     8de:	08 95       	ret

000008e0 <main>:
int main()
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	a2 97       	sbiw	r28, 0x22	; 34
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	char float_val[10];
	//float X_a,Y_a,Z_a;			//Acceleration Values X-Y-Z
	//float X_g=0,Y_g=0,Z_g=0;		//Gyro Values X-Y-Z
	
	I2C_Init();						//Initialize I2C
     8f4:	0e 94 0d 01 	call	0x21a	; 0x21a <I2C_Init>
	MPU6050_Init();					//Initialize MPU6050
     8f8:	0e 94 ab 01 	call	0x356	; 0x356 <MPU6050_Init>
	USART_Init(9600);				//Initialize UART
     8fc:	60 e8       	ldi	r22, 0x80	; 128
     8fe:	75 e2       	ldi	r23, 0x25	; 37
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 10 05 	call	0xa20	; 0xa20 <USART_Init>
	
	//10ms sample
	TCCR1B = (1<< CS10);		//prescaler of 8
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCNT1 = 0;
     90e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     912:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	while(1)
	{
		if(TCNT1 == 20000)
     916:	0f 2e       	mov	r0, r31
     918:	f4 e8       	ldi	r31, 0x84	; 132
     91a:	ef 2e       	mov	r14, r31
     91c:	f1 2c       	mov	r15, r1
     91e:	f0 2d       	mov	r31, r0
		getAngle(Acc_x, Acc_y, Acc_z);
		ComplementaryFilter();
		
		
		//Read/Print pitch
		dtostrf(pitch, 3, 2, float_val );
     920:	6e 01       	movw	r12, r28
     922:	25 e1       	ldi	r18, 0x15	; 21
     924:	c2 0e       	add	r12, r18
     926:	d1 1c       	adc	r13, r1
		sprintf(buffer," Pitch = %s\t",float_val);
     928:	0f 2e       	mov	r0, r31
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	8f 2e       	mov	r8, r31
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	9f 2e       	mov	r9, r31
     932:	f0 2d       	mov	r31, r0
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	5c 01       	movw	r10, r24
		USART_SendString(buffer);
		
		//Read/Print Gyro-Z
		dtostrf(roll, 3, 2, float_val);
		sprintf(buffer," Roll = %s\n",float_val);
     93a:	0f 2e       	mov	r0, r31
     93c:	fd e0       	ldi	r31, 0x0D	; 13
     93e:	2f 2e       	mov	r2, r31
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	3f 2e       	mov	r3, r31
     944:	f0 2d       	mov	r31, r0
	TCCR1B = (1<< CS10);		//prescaler of 8
	TCNT1 = 0;
	
	while(1)
	{
		if(TCNT1 == 20000)
     946:	f7 01       	movw	r30, r14
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	80 32       	cpi	r24, 0x20	; 32
     94e:	9e 44       	sbci	r25, 0x4E	; 78
     950:	d1 f7       	brne	.-12     	; 0x946 <__stack+0x47>
		{
		Read_RawValue();			//Call Read_RawValue Function
     952:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Read_RawValue>
		
		X_g = Gyro_x/16.4;			//Gyro-X
		Y_g = Gyro_y/16.4;			//Gyro-Y
		Z_g = Gyro_z/16.4;			//Gyro-Z*/
		
		getAngle(Acc_x, Acc_y, Acc_z);
     956:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end>
     95a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x1>
     95e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end+0x2>
     962:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x3>
     966:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fixsfsi>
     96a:	2b 01       	movw	r4, r22
     96c:	3c 01       	movw	r6, r24
     96e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Acc_y>
     972:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <Acc_y+0x1>
     976:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Acc_y+0x2>
     97a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Acc_y+0x3>
     97e:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fixsfsi>
     982:	6f 8f       	std	Y+31, r22	; 0x1f
     984:	78 a3       	std	Y+32, r23	; 0x20
     986:	89 a3       	std	Y+33, r24	; 0x21
     988:	9a a3       	std	Y+34, r25	; 0x22
     98a:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <Acc_x>
     98e:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <Acc_x+0x1>
     992:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Acc_x+0x2>
     996:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Acc_x+0x3>
     99a:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fixsfsi>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	a2 01       	movw	r20, r4
     9a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9a6:	78 a1       	ldd	r23, Y+32	; 0x20
     9a8:	0e 94 a5 02 	call	0x54a	; 0x54a <getAngle>
		ComplementaryFilter();
     9ac:	0e 94 3e 03 	call	0x67c	; 0x67c <ComplementaryFilter>
		
		
		//Read/Print pitch
		dtostrf(pitch, 3, 2, float_val );
     9b0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <pitch>
     9b4:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <pitch+0x1>
     9b8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pitch+0x2>
     9bc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pitch+0x3>
     9c0:	86 01       	movw	r16, r12
     9c2:	22 e0       	ldi	r18, 0x02	; 2
     9c4:	43 e0       	ldi	r20, 0x03	; 3
     9c6:	0e 94 8d 08 	call	0x111a	; 0x111a <dtostrf>
		sprintf(buffer," Pitch = %s\t",float_val);
     9ca:	df 92       	push	r13
     9cc:	cf 92       	push	r12
     9ce:	9f 92       	push	r9
     9d0:	8f 92       	push	r8
     9d2:	bf 92       	push	r11
     9d4:	af 92       	push	r10
     9d6:	0e 94 ad 08 	call	0x115a	; 0x115a <sprintf>
		USART_SendString(buffer);
     9da:	c5 01       	movw	r24, r10
     9dc:	0e 94 4c 05 	call	0xa98	; 0xa98 <USART_SendString>
		
		//Read/Print Gyro-Z
		dtostrf(roll, 3, 2, float_val);
     9e0:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <roll>
     9e4:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <roll+0x1>
     9e8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <roll+0x2>
     9ec:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <roll+0x3>
     9f0:	22 e0       	ldi	r18, 0x02	; 2
     9f2:	43 e0       	ldi	r20, 0x03	; 3
     9f4:	0e 94 8d 08 	call	0x111a	; 0x111a <dtostrf>
		sprintf(buffer," Roll = %s\n",float_val);
     9f8:	df 92       	push	r13
     9fa:	cf 92       	push	r12
     9fc:	3f 92       	push	r3
     9fe:	2f 92       	push	r2
     a00:	bf 92       	push	r11
     a02:	af 92       	push	r10
     a04:	0e 94 ad 08 	call	0x115a	; 0x115a <sprintf>
		USART_SendString(buffer);
     a08:	c5 01       	movw	r24, r10
     a0a:	0e 94 4c 05 	call	0xa98	; 0xa98 <USART_SendString>
		TCNT1 = 0;	//reset timer counter
     a0e:	f7 01       	movw	r30, r14
     a10:	11 82       	std	Z+1, r1	; 0x01
     a12:	10 82       	st	Z, r1
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	93 cf       	rjmp	.-218    	; 0x946 <__stack+0x47>

00000a20 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */ 
}
     a20:	e1 ec       	ldi	r30, 0xC1	; 193
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	20 81       	ld	r18, Z
     a26:	28 61       	ori	r18, 0x18	; 24
     a28:	20 83       	st	Z, r18
     a2a:	e2 ec       	ldi	r30, 0xC2	; 194
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	20 81       	ld	r18, Z
     a30:	26 60       	ori	r18, 0x06	; 6
     a32:	20 83       	st	Z, r18
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	aa 1f       	adc	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	aa 1f       	adc	r26, r26
     a46:	bb 1f       	adc	r27, r27
     a48:	9c 01       	movw	r18, r24
     a4a:	ad 01       	movw	r20, r26
     a4c:	22 0f       	add	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	44 1f       	adc	r20, r20
     a52:	55 1f       	adc	r21, r21
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	44 1f       	adc	r20, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	74 e2       	ldi	r23, 0x24	; 36
     a60:	84 ef       	ldi	r24, 0xF4	; 244
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodsi4>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	82 0f       	add	r24, r18
     a6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     a70:	da 01       	movw	r26, r20
     a72:	c9 01       	movw	r24, r18
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	a1 09       	sbc	r26, r1
     a78:	b1 09       	sbc	r27, r1
     a7a:	89 2f       	mov	r24, r25
     a7c:	9a 2f       	mov	r25, r26
     a7e:	ab 2f       	mov	r26, r27
     a80:	bb 27       	eor	r27, r27
     a82:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     a86:	08 95       	ret

00000a88 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
     a88:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     a8c:	e0 ec       	ldi	r30, 0xC0	; 192
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	85 ff       	sbrs	r24, 5
     a94:	fd cf       	rjmp	.-6      	; 0xa90 <USART_TxChar+0x8>
}
     a96:	08 95       	ret

00000a98 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     a9e:	88 81       	ld	r24, Y
     aa0:	88 23       	and	r24, r24
     aa2:	31 f0       	breq	.+12     	; 0xab0 <USART_SendString+0x18>
     aa4:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     aa6:	0e 94 44 05 	call	0xa88	; 0xa88 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     aaa:	89 91       	ld	r24, Y+
     aac:	81 11       	cpse	r24, r1
     aae:	fb cf       	rjmp	.-10     	; 0xaa6 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <__subsf3>:
     ab6:	50 58       	subi	r21, 0x80	; 128

00000ab8 <__addsf3>:
     ab8:	bb 27       	eor	r27, r27
     aba:	aa 27       	eor	r26, r26
     abc:	0e 94 73 05 	call	0xae6	; 0xae6 <__addsf3x>
     ac0:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_round>
     ac4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__fp_pscA>
     ac8:	38 f0       	brcs	.+14     	; 0xad8 <__addsf3+0x20>
     aca:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscB>
     ace:	20 f0       	brcs	.+8      	; 0xad8 <__addsf3+0x20>
     ad0:	39 f4       	brne	.+14     	; 0xae0 <__addsf3+0x28>
     ad2:	9f 3f       	cpi	r25, 0xFF	; 255
     ad4:	19 f4       	brne	.+6      	; 0xadc <__addsf3+0x24>
     ad6:	26 f4       	brtc	.+8      	; 0xae0 <__addsf3+0x28>
     ad8:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_nan>
     adc:	0e f4       	brtc	.+2      	; 0xae0 <__addsf3+0x28>
     ade:	e0 95       	com	r30
     ae0:	e7 fb       	bst	r30, 7
     ae2:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_inf>

00000ae6 <__addsf3x>:
     ae6:	e9 2f       	mov	r30, r25
     ae8:	0e 94 6e 07 	call	0xedc	; 0xedc <__fp_split3>
     aec:	58 f3       	brcs	.-42     	; 0xac4 <__addsf3+0xc>
     aee:	ba 17       	cp	r27, r26
     af0:	62 07       	cpc	r22, r18
     af2:	73 07       	cpc	r23, r19
     af4:	84 07       	cpc	r24, r20
     af6:	95 07       	cpc	r25, r21
     af8:	20 f0       	brcs	.+8      	; 0xb02 <__addsf3x+0x1c>
     afa:	79 f4       	brne	.+30     	; 0xb1a <__addsf3x+0x34>
     afc:	a6 f5       	brtc	.+104    	; 0xb66 <__addsf3x+0x80>
     afe:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_zero>
     b02:	0e f4       	brtc	.+2      	; 0xb06 <__addsf3x+0x20>
     b04:	e0 95       	com	r30
     b06:	0b 2e       	mov	r0, r27
     b08:	ba 2f       	mov	r27, r26
     b0a:	a0 2d       	mov	r26, r0
     b0c:	0b 01       	movw	r0, r22
     b0e:	b9 01       	movw	r22, r18
     b10:	90 01       	movw	r18, r0
     b12:	0c 01       	movw	r0, r24
     b14:	ca 01       	movw	r24, r20
     b16:	a0 01       	movw	r20, r0
     b18:	11 24       	eor	r1, r1
     b1a:	ff 27       	eor	r31, r31
     b1c:	59 1b       	sub	r21, r25
     b1e:	99 f0       	breq	.+38     	; 0xb46 <__addsf3x+0x60>
     b20:	59 3f       	cpi	r21, 0xF9	; 249
     b22:	50 f4       	brcc	.+20     	; 0xb38 <__addsf3x+0x52>
     b24:	50 3e       	cpi	r21, 0xE0	; 224
     b26:	68 f1       	brcs	.+90     	; 0xb82 <__addsf3x+0x9c>
     b28:	1a 16       	cp	r1, r26
     b2a:	f0 40       	sbci	r31, 0x00	; 0
     b2c:	a2 2f       	mov	r26, r18
     b2e:	23 2f       	mov	r18, r19
     b30:	34 2f       	mov	r19, r20
     b32:	44 27       	eor	r20, r20
     b34:	58 5f       	subi	r21, 0xF8	; 248
     b36:	f3 cf       	rjmp	.-26     	; 0xb1e <__addsf3x+0x38>
     b38:	46 95       	lsr	r20
     b3a:	37 95       	ror	r19
     b3c:	27 95       	ror	r18
     b3e:	a7 95       	ror	r26
     b40:	f0 40       	sbci	r31, 0x00	; 0
     b42:	53 95       	inc	r21
     b44:	c9 f7       	brne	.-14     	; 0xb38 <__addsf3x+0x52>
     b46:	7e f4       	brtc	.+30     	; 0xb66 <__addsf3x+0x80>
     b48:	1f 16       	cp	r1, r31
     b4a:	ba 0b       	sbc	r27, r26
     b4c:	62 0b       	sbc	r22, r18
     b4e:	73 0b       	sbc	r23, r19
     b50:	84 0b       	sbc	r24, r20
     b52:	ba f0       	brmi	.+46     	; 0xb82 <__addsf3x+0x9c>
     b54:	91 50       	subi	r25, 0x01	; 1
     b56:	a1 f0       	breq	.+40     	; 0xb80 <__addsf3x+0x9a>
     b58:	ff 0f       	add	r31, r31
     b5a:	bb 1f       	adc	r27, r27
     b5c:	66 1f       	adc	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	88 1f       	adc	r24, r24
     b62:	c2 f7       	brpl	.-16     	; 0xb54 <__addsf3x+0x6e>
     b64:	0e c0       	rjmp	.+28     	; 0xb82 <__addsf3x+0x9c>
     b66:	ba 0f       	add	r27, r26
     b68:	62 1f       	adc	r22, r18
     b6a:	73 1f       	adc	r23, r19
     b6c:	84 1f       	adc	r24, r20
     b6e:	48 f4       	brcc	.+18     	; 0xb82 <__addsf3x+0x9c>
     b70:	87 95       	ror	r24
     b72:	77 95       	ror	r23
     b74:	67 95       	ror	r22
     b76:	b7 95       	ror	r27
     b78:	f7 95       	ror	r31
     b7a:	9e 3f       	cpi	r25, 0xFE	; 254
     b7c:	08 f0       	brcs	.+2      	; 0xb80 <__addsf3x+0x9a>
     b7e:	b0 cf       	rjmp	.-160    	; 0xae0 <__addsf3+0x28>
     b80:	93 95       	inc	r25
     b82:	88 0f       	add	r24, r24
     b84:	08 f0       	brcs	.+2      	; 0xb88 <__addsf3x+0xa2>
     b86:	99 27       	eor	r25, r25
     b88:	ee 0f       	add	r30, r30
     b8a:	97 95       	ror	r25
     b8c:	87 95       	ror	r24
     b8e:	08 95       	ret
     b90:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__fp_pscA>
     b94:	60 f0       	brcs	.+24     	; 0xbae <__addsf3x+0xc8>
     b96:	80 e8       	ldi	r24, 0x80	; 128
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <__addsf3x+0xb8>
     b9c:	9e ef       	ldi	r25, 0xFE	; 254
     b9e:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscB>
     ba2:	28 f0       	brcs	.+10     	; 0xbae <__addsf3x+0xc8>
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	51 e0       	ldi	r21, 0x01	; 1
     ba8:	71 f4       	brne	.+28     	; 0xbc6 <atan2+0x10>
     baa:	5e ef       	ldi	r21, 0xFE	; 254
     bac:	0c c0       	rjmp	.+24     	; 0xbc6 <atan2+0x10>
     bae:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_nan>
     bb2:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_zero>

00000bb6 <atan2>:
     bb6:	e9 2f       	mov	r30, r25
     bb8:	e0 78       	andi	r30, 0x80	; 128
     bba:	0e 94 6e 07 	call	0xedc	; 0xedc <__fp_split3>
     bbe:	40 f3       	brcs	.-48     	; 0xb90 <__addsf3x+0xaa>
     bc0:	09 2e       	mov	r0, r25
     bc2:	05 2a       	or	r0, r21
     bc4:	b1 f3       	breq	.-20     	; 0xbb2 <__addsf3x+0xcc>
     bc6:	26 17       	cp	r18, r22
     bc8:	37 07       	cpc	r19, r23
     bca:	48 07       	cpc	r20, r24
     bcc:	59 07       	cpc	r21, r25
     bce:	38 f0       	brcs	.+14     	; 0xbde <atan2+0x28>
     bd0:	0e 2e       	mov	r0, r30
     bd2:	07 f8       	bld	r0, 7
     bd4:	e0 25       	eor	r30, r0
     bd6:	69 f0       	breq	.+26     	; 0xbf2 <atan2+0x3c>
     bd8:	e0 25       	eor	r30, r0
     bda:	e0 64       	ori	r30, 0x40	; 64
     bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <atan2+0x3c>
     bde:	ef 63       	ori	r30, 0x3F	; 63
     be0:	07 f8       	bld	r0, 7
     be2:	00 94       	com	r0
     be4:	07 fa       	bst	r0, 7
     be6:	db 01       	movw	r26, r22
     be8:	b9 01       	movw	r22, r18
     bea:	9d 01       	movw	r18, r26
     bec:	dc 01       	movw	r26, r24
     bee:	ca 01       	movw	r24, r20
     bf0:	ad 01       	movw	r20, r26
     bf2:	ef 93       	push	r30
     bf4:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3_pse>
     bf8:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_round>
     bfc:	0e 94 0b 06 	call	0xc16	; 0xc16 <atan>
     c00:	5f 91       	pop	r21
     c02:	55 23       	and	r21, r21
     c04:	39 f0       	breq	.+14     	; 0xc14 <atan2+0x5e>
     c06:	2b ed       	ldi	r18, 0xDB	; 219
     c08:	3f e0       	ldi	r19, 0x0F	; 15
     c0a:	49 e4       	ldi	r20, 0x49	; 73
     c0c:	50 fd       	sbrc	r21, 0
     c0e:	49 ec       	ldi	r20, 0xC9	; 201
     c10:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__addsf3>
     c14:	08 95       	ret

00000c16 <atan>:
     c16:	df 93       	push	r29
     c18:	dd 27       	eor	r29, r29
     c1a:	b9 2f       	mov	r27, r25
     c1c:	bf 77       	andi	r27, 0x7F	; 127
     c1e:	40 e8       	ldi	r20, 0x80	; 128
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	16 16       	cp	r1, r22
     c24:	17 06       	cpc	r1, r23
     c26:	48 07       	cpc	r20, r24
     c28:	5b 07       	cpc	r21, r27
     c2a:	18 f4       	brcc	.+6      	; 0xc32 <atan+0x1c>
     c2c:	d9 2f       	mov	r29, r25
     c2e:	0e 94 97 07 	call	0xf2e	; 0xf2e <inverse>
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	7f 93       	push	r23
     c38:	6f 93       	push	r22
     c3a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <square>
     c3e:	e4 eb       	ldi	r30, 0xB4	; 180
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_powser>
     c46:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_round>
     c4a:	2f 91       	pop	r18
     c4c:	3f 91       	pop	r19
     c4e:	4f 91       	pop	r20
     c50:	5f 91       	pop	r21
     c52:	0e 94 b2 07 	call	0xf64	; 0xf64 <__mulsf3x>
     c56:	dd 23       	and	r29, r29
     c58:	51 f0       	breq	.+20     	; 0xc6e <atan+0x58>
     c5a:	90 58       	subi	r25, 0x80	; 128
     c5c:	a2 ea       	ldi	r26, 0xA2	; 162
     c5e:	2a ed       	ldi	r18, 0xDA	; 218
     c60:	3f e0       	ldi	r19, 0x0F	; 15
     c62:	49 ec       	ldi	r20, 0xC9	; 201
     c64:	5f e3       	ldi	r21, 0x3F	; 63
     c66:	d0 78       	andi	r29, 0x80	; 128
     c68:	5d 27       	eor	r21, r29
     c6a:	0e 94 73 05 	call	0xae6	; 0xae6 <__addsf3x>
     c6e:	df 91       	pop	r29
     c70:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_round>

00000c74 <__divsf3>:
     c74:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__divsf3x>
     c78:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_round>
     c7c:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscB>
     c80:	58 f0       	brcs	.+22     	; 0xc98 <__divsf3+0x24>
     c82:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__fp_pscA>
     c86:	40 f0       	brcs	.+16     	; 0xc98 <__divsf3+0x24>
     c88:	29 f4       	brne	.+10     	; 0xc94 <__divsf3+0x20>
     c8a:	5f 3f       	cpi	r21, 0xFF	; 255
     c8c:	29 f0       	breq	.+10     	; 0xc98 <__divsf3+0x24>
     c8e:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_inf>
     c92:	51 11       	cpse	r21, r1
     c94:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_szero>
     c98:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_nan>

00000c9c <__divsf3x>:
     c9c:	0e 94 6e 07 	call	0xedc	; 0xedc <__fp_split3>
     ca0:	68 f3       	brcs	.-38     	; 0xc7c <__divsf3+0x8>

00000ca2 <__divsf3_pse>:
     ca2:	99 23       	and	r25, r25
     ca4:	b1 f3       	breq	.-20     	; 0xc92 <__divsf3+0x1e>
     ca6:	55 23       	and	r21, r21
     ca8:	91 f3       	breq	.-28     	; 0xc8e <__divsf3+0x1a>
     caa:	95 1b       	sub	r25, r21
     cac:	55 0b       	sbc	r21, r21
     cae:	bb 27       	eor	r27, r27
     cb0:	aa 27       	eor	r26, r26
     cb2:	62 17       	cp	r22, r18
     cb4:	73 07       	cpc	r23, r19
     cb6:	84 07       	cpc	r24, r20
     cb8:	38 f0       	brcs	.+14     	; 0xcc8 <__divsf3_pse+0x26>
     cba:	9f 5f       	subi	r25, 0xFF	; 255
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	44 1f       	adc	r20, r20
     cc4:	aa 1f       	adc	r26, r26
     cc6:	a9 f3       	breq	.-22     	; 0xcb2 <__divsf3_pse+0x10>
     cc8:	35 d0       	rcall	.+106    	; 0xd34 <__divsf3_pse+0x92>
     cca:	0e 2e       	mov	r0, r30
     ccc:	3a f0       	brmi	.+14     	; 0xcdc <__divsf3_pse+0x3a>
     cce:	e0 e8       	ldi	r30, 0x80	; 128
     cd0:	32 d0       	rcall	.+100    	; 0xd36 <__divsf3_pse+0x94>
     cd2:	91 50       	subi	r25, 0x01	; 1
     cd4:	50 40       	sbci	r21, 0x00	; 0
     cd6:	e6 95       	lsr	r30
     cd8:	00 1c       	adc	r0, r0
     cda:	ca f7       	brpl	.-14     	; 0xcce <__divsf3_pse+0x2c>
     cdc:	2b d0       	rcall	.+86     	; 0xd34 <__divsf3_pse+0x92>
     cde:	fe 2f       	mov	r31, r30
     ce0:	29 d0       	rcall	.+82     	; 0xd34 <__divsf3_pse+0x92>
     ce2:	66 0f       	add	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	88 1f       	adc	r24, r24
     ce8:	bb 1f       	adc	r27, r27
     cea:	26 17       	cp	r18, r22
     cec:	37 07       	cpc	r19, r23
     cee:	48 07       	cpc	r20, r24
     cf0:	ab 07       	cpc	r26, r27
     cf2:	b0 e8       	ldi	r27, 0x80	; 128
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__divsf3_pse+0x56>
     cf6:	bb 0b       	sbc	r27, r27
     cf8:	80 2d       	mov	r24, r0
     cfa:	bf 01       	movw	r22, r30
     cfc:	ff 27       	eor	r31, r31
     cfe:	93 58       	subi	r25, 0x83	; 131
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	3a f0       	brmi	.+14     	; 0xd12 <__divsf3_pse+0x70>
     d04:	9e 3f       	cpi	r25, 0xFE	; 254
     d06:	51 05       	cpc	r21, r1
     d08:	78 f0       	brcs	.+30     	; 0xd28 <__divsf3_pse+0x86>
     d0a:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_inf>
     d0e:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_szero>
     d12:	5f 3f       	cpi	r21, 0xFF	; 255
     d14:	e4 f3       	brlt	.-8      	; 0xd0e <__divsf3_pse+0x6c>
     d16:	98 3e       	cpi	r25, 0xE8	; 232
     d18:	d4 f3       	brlt	.-12     	; 0xd0e <__divsf3_pse+0x6c>
     d1a:	86 95       	lsr	r24
     d1c:	77 95       	ror	r23
     d1e:	67 95       	ror	r22
     d20:	b7 95       	ror	r27
     d22:	f7 95       	ror	r31
     d24:	9f 5f       	subi	r25, 0xFF	; 255
     d26:	c9 f7       	brne	.-14     	; 0xd1a <__divsf3_pse+0x78>
     d28:	88 0f       	add	r24, r24
     d2a:	91 1d       	adc	r25, r1
     d2c:	96 95       	lsr	r25
     d2e:	87 95       	ror	r24
     d30:	97 f9       	bld	r25, 7
     d32:	08 95       	ret
     d34:	e1 e0       	ldi	r30, 0x01	; 1
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	bb 1f       	adc	r27, r27
     d3e:	62 17       	cp	r22, r18
     d40:	73 07       	cpc	r23, r19
     d42:	84 07       	cpc	r24, r20
     d44:	ba 07       	cpc	r27, r26
     d46:	20 f0       	brcs	.+8      	; 0xd50 <__divsf3_pse+0xae>
     d48:	62 1b       	sub	r22, r18
     d4a:	73 0b       	sbc	r23, r19
     d4c:	84 0b       	sbc	r24, r20
     d4e:	ba 0b       	sbc	r27, r26
     d50:	ee 1f       	adc	r30, r30
     d52:	88 f7       	brcc	.-30     	; 0xd36 <__divsf3_pse+0x94>
     d54:	e0 95       	com	r30
     d56:	08 95       	ret

00000d58 <__fixsfsi>:
     d58:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     d5c:	68 94       	set
     d5e:	b1 11       	cpse	r27, r1
     d60:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_szero>
     d64:	08 95       	ret

00000d66 <__fixunssfsi>:
     d66:	0e 94 76 07 	call	0xeec	; 0xeec <__fp_splitA>
     d6a:	88 f0       	brcs	.+34     	; 0xd8e <__fixunssfsi+0x28>
     d6c:	9f 57       	subi	r25, 0x7F	; 127
     d6e:	98 f0       	brcs	.+38     	; 0xd96 <__fixunssfsi+0x30>
     d70:	b9 2f       	mov	r27, r25
     d72:	99 27       	eor	r25, r25
     d74:	b7 51       	subi	r27, 0x17	; 23
     d76:	b0 f0       	brcs	.+44     	; 0xda4 <__fixunssfsi+0x3e>
     d78:	e1 f0       	breq	.+56     	; 0xdb2 <__fixunssfsi+0x4c>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	1a f0       	brmi	.+6      	; 0xd8a <__fixunssfsi+0x24>
     d84:	ba 95       	dec	r27
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__fixunssfsi+0x14>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <__fixunssfsi+0x4c>
     d8a:	b1 30       	cpi	r27, 0x01	; 1
     d8c:	91 f0       	breq	.+36     	; 0xdb2 <__fixunssfsi+0x4c>
     d8e:	0e 94 90 07 	call	0xf20	; 0xf20 <__fp_zero>
     d92:	b1 e0       	ldi	r27, 0x01	; 1
     d94:	08 95       	ret
     d96:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_zero>
     d9a:	67 2f       	mov	r22, r23
     d9c:	78 2f       	mov	r23, r24
     d9e:	88 27       	eor	r24, r24
     da0:	b8 5f       	subi	r27, 0xF8	; 248
     da2:	39 f0       	breq	.+14     	; 0xdb2 <__fixunssfsi+0x4c>
     da4:	b9 3f       	cpi	r27, 0xF9	; 249
     da6:	cc f3       	brlt	.-14     	; 0xd9a <__fixunssfsi+0x34>
     da8:	86 95       	lsr	r24
     daa:	77 95       	ror	r23
     dac:	67 95       	ror	r22
     dae:	b3 95       	inc	r27
     db0:	d9 f7       	brne	.-10     	; 0xda8 <__fixunssfsi+0x42>
     db2:	3e f4       	brtc	.+14     	; 0xdc2 <__fixunssfsi+0x5c>
     db4:	90 95       	com	r25
     db6:	80 95       	com	r24
     db8:	70 95       	com	r23
     dba:	61 95       	neg	r22
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
     dbe:	8f 4f       	sbci	r24, 0xFF	; 255
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	08 95       	ret

00000dc4 <__floatunsisf>:
     dc4:	e8 94       	clt
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <__floatsisf+0x12>

00000dc8 <__floatsisf>:
     dc8:	97 fb       	bst	r25, 7
     dca:	3e f4       	brtc	.+14     	; 0xdda <__floatsisf+0x12>
     dcc:	90 95       	com	r25
     dce:	80 95       	com	r24
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	99 23       	and	r25, r25
     ddc:	a9 f0       	breq	.+42     	; 0xe08 <__floatsisf+0x40>
     dde:	f9 2f       	mov	r31, r25
     de0:	96 e9       	ldi	r25, 0x96	; 150
     de2:	bb 27       	eor	r27, r27
     de4:	93 95       	inc	r25
     de6:	f6 95       	lsr	r31
     de8:	87 95       	ror	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f1 11       	cpse	r31, r1
     df2:	f8 cf       	rjmp	.-16     	; 0xde4 <__floatsisf+0x1c>
     df4:	fa f4       	brpl	.+62     	; 0xe34 <__floatsisf+0x6c>
     df6:	bb 0f       	add	r27, r27
     df8:	11 f4       	brne	.+4      	; 0xdfe <__floatsisf+0x36>
     dfa:	60 ff       	sbrs	r22, 0
     dfc:	1b c0       	rjmp	.+54     	; 0xe34 <__floatsisf+0x6c>
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	16 c0       	rjmp	.+44     	; 0xe34 <__floatsisf+0x6c>
     e08:	88 23       	and	r24, r24
     e0a:	11 f0       	breq	.+4      	; 0xe10 <__floatsisf+0x48>
     e0c:	96 e9       	ldi	r25, 0x96	; 150
     e0e:	11 c0       	rjmp	.+34     	; 0xe32 <__floatsisf+0x6a>
     e10:	77 23       	and	r23, r23
     e12:	21 f0       	breq	.+8      	; 0xe1c <__floatsisf+0x54>
     e14:	9e e8       	ldi	r25, 0x8E	; 142
     e16:	87 2f       	mov	r24, r23
     e18:	76 2f       	mov	r23, r22
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <__floatsisf+0x5e>
     e1c:	66 23       	and	r22, r22
     e1e:	71 f0       	breq	.+28     	; 0xe3c <__floatsisf+0x74>
     e20:	96 e8       	ldi	r25, 0x86	; 134
     e22:	86 2f       	mov	r24, r22
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	2a f0       	brmi	.+10     	; 0xe34 <__floatsisf+0x6c>
     e2a:	9a 95       	dec	r25
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	da f7       	brpl	.-10     	; 0xe2a <__floatsisf+0x62>
     e34:	88 0f       	add	r24, r24
     e36:	96 95       	lsr	r25
     e38:	87 95       	ror	r24
     e3a:	97 f9       	bld	r25, 7
     e3c:	08 95       	ret

00000e3e <__fp_inf>:
     e3e:	97 f9       	bld	r25, 7
     e40:	9f 67       	ori	r25, 0x7F	; 127
     e42:	80 e8       	ldi	r24, 0x80	; 128
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	08 95       	ret

00000e4a <__fp_nan>:
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
     e4c:	80 ec       	ldi	r24, 0xC0	; 192
     e4e:	08 95       	ret

00000e50 <__fp_powser>:
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	1f 93       	push	r17
     e56:	0f 93       	push	r16
     e58:	ff 92       	push	r15
     e5a:	ef 92       	push	r14
     e5c:	df 92       	push	r13
     e5e:	7b 01       	movw	r14, r22
     e60:	8c 01       	movw	r16, r24
     e62:	68 94       	set
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <__fp_powser+0x22>
     e66:	da 2e       	mov	r13, r26
     e68:	ef 01       	movw	r28, r30
     e6a:	0e 94 b2 07 	call	0xf64	; 0xf64 <__mulsf3x>
     e6e:	fe 01       	movw	r30, r28
     e70:	e8 94       	clt
     e72:	a5 91       	lpm	r26, Z+
     e74:	25 91       	lpm	r18, Z+
     e76:	35 91       	lpm	r19, Z+
     e78:	45 91       	lpm	r20, Z+
     e7a:	55 91       	lpm	r21, Z+
     e7c:	a6 f3       	brts	.-24     	; 0xe66 <__fp_powser+0x16>
     e7e:	ef 01       	movw	r28, r30
     e80:	0e 94 73 05 	call	0xae6	; 0xae6 <__addsf3x>
     e84:	fe 01       	movw	r30, r28
     e86:	97 01       	movw	r18, r14
     e88:	a8 01       	movw	r20, r16
     e8a:	da 94       	dec	r13
     e8c:	69 f7       	brne	.-38     	; 0xe68 <__fp_powser+0x18>
     e8e:	df 90       	pop	r13
     e90:	ef 90       	pop	r14
     e92:	ff 90       	pop	r15
     e94:	0f 91       	pop	r16
     e96:	1f 91       	pop	r17
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <__fp_pscA>:
     e9e:	00 24       	eor	r0, r0
     ea0:	0a 94       	dec	r0
     ea2:	16 16       	cp	r1, r22
     ea4:	17 06       	cpc	r1, r23
     ea6:	18 06       	cpc	r1, r24
     ea8:	09 06       	cpc	r0, r25
     eaa:	08 95       	ret

00000eac <__fp_pscB>:
     eac:	00 24       	eor	r0, r0
     eae:	0a 94       	dec	r0
     eb0:	12 16       	cp	r1, r18
     eb2:	13 06       	cpc	r1, r19
     eb4:	14 06       	cpc	r1, r20
     eb6:	05 06       	cpc	r0, r21
     eb8:	08 95       	ret

00000eba <__fp_round>:
     eba:	09 2e       	mov	r0, r25
     ebc:	03 94       	inc	r0
     ebe:	00 0c       	add	r0, r0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__fp_round+0xc>
     ec2:	88 23       	and	r24, r24
     ec4:	52 f0       	brmi	.+20     	; 0xeda <__fp_round+0x20>
     ec6:	bb 0f       	add	r27, r27
     ec8:	40 f4       	brcc	.+16     	; 0xeda <__fp_round+0x20>
     eca:	bf 2b       	or	r27, r31
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__fp_round+0x18>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__fp_round+0x20>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__fp_split3>:
     edc:	57 fd       	sbrc	r21, 7
     ede:	90 58       	subi	r25, 0x80	; 128
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	59 f0       	breq	.+22     	; 0xefc <__fp_splitA+0x10>
     ee6:	5f 3f       	cpi	r21, 0xFF	; 255
     ee8:	71 f0       	breq	.+28     	; 0xf06 <__fp_splitA+0x1a>
     eea:	47 95       	ror	r20

00000eec <__fp_splitA>:
     eec:	88 0f       	add	r24, r24
     eee:	97 fb       	bst	r25, 7
     ef0:	99 1f       	adc	r25, r25
     ef2:	61 f0       	breq	.+24     	; 0xf0c <__fp_splitA+0x20>
     ef4:	9f 3f       	cpi	r25, 0xFF	; 255
     ef6:	79 f0       	breq	.+30     	; 0xf16 <__fp_splitA+0x2a>
     ef8:	87 95       	ror	r24
     efa:	08 95       	ret
     efc:	12 16       	cp	r1, r18
     efe:	13 06       	cpc	r1, r19
     f00:	14 06       	cpc	r1, r20
     f02:	55 1f       	adc	r21, r21
     f04:	f2 cf       	rjmp	.-28     	; 0xeea <__fp_split3+0xe>
     f06:	46 95       	lsr	r20
     f08:	f1 df       	rcall	.-30     	; 0xeec <__fp_splitA>
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <__fp_splitA+0x30>
     f0c:	16 16       	cp	r1, r22
     f0e:	17 06       	cpc	r1, r23
     f10:	18 06       	cpc	r1, r24
     f12:	99 1f       	adc	r25, r25
     f14:	f1 cf       	rjmp	.-30     	; 0xef8 <__fp_splitA+0xc>
     f16:	86 95       	lsr	r24
     f18:	71 05       	cpc	r23, r1
     f1a:	61 05       	cpc	r22, r1
     f1c:	08 94       	sec
     f1e:	08 95       	ret

00000f20 <__fp_zero>:
     f20:	e8 94       	clt

00000f22 <__fp_szero>:
     f22:	bb 27       	eor	r27, r27
     f24:	66 27       	eor	r22, r22
     f26:	77 27       	eor	r23, r23
     f28:	cb 01       	movw	r24, r22
     f2a:	97 f9       	bld	r25, 7
     f2c:	08 95       	ret

00000f2e <inverse>:
     f2e:	9b 01       	movw	r18, r22
     f30:	ac 01       	movw	r20, r24
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e8       	ldi	r24, 0x80	; 128
     f38:	9f e3       	ldi	r25, 0x3F	; 63
     f3a:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__divsf3>

00000f3e <__mulsf3>:
     f3e:	0e 94 b2 07 	call	0xf64	; 0xf64 <__mulsf3x>
     f42:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_round>
     f46:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__fp_pscA>
     f4a:	38 f0       	brcs	.+14     	; 0xf5a <__mulsf3+0x1c>
     f4c:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscB>
     f50:	20 f0       	brcs	.+8      	; 0xf5a <__mulsf3+0x1c>
     f52:	95 23       	and	r25, r21
     f54:	11 f0       	breq	.+4      	; 0xf5a <__mulsf3+0x1c>
     f56:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_inf>
     f5a:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_nan>
     f5e:	11 24       	eor	r1, r1
     f60:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_szero>

00000f64 <__mulsf3x>:
     f64:	0e 94 6e 07 	call	0xedc	; 0xedc <__fp_split3>
     f68:	70 f3       	brcs	.-36     	; 0xf46 <__mulsf3+0x8>

00000f6a <__mulsf3_pse>:
     f6a:	95 9f       	mul	r25, r21
     f6c:	c1 f3       	breq	.-16     	; 0xf5e <__mulsf3+0x20>
     f6e:	95 0f       	add	r25, r21
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	55 1f       	adc	r21, r21
     f74:	62 9f       	mul	r22, r18
     f76:	f0 01       	movw	r30, r0
     f78:	72 9f       	mul	r23, r18
     f7a:	bb 27       	eor	r27, r27
     f7c:	f0 0d       	add	r31, r0
     f7e:	b1 1d       	adc	r27, r1
     f80:	63 9f       	mul	r22, r19
     f82:	aa 27       	eor	r26, r26
     f84:	f0 0d       	add	r31, r0
     f86:	b1 1d       	adc	r27, r1
     f88:	aa 1f       	adc	r26, r26
     f8a:	64 9f       	mul	r22, r20
     f8c:	66 27       	eor	r22, r22
     f8e:	b0 0d       	add	r27, r0
     f90:	a1 1d       	adc	r26, r1
     f92:	66 1f       	adc	r22, r22
     f94:	82 9f       	mul	r24, r18
     f96:	22 27       	eor	r18, r18
     f98:	b0 0d       	add	r27, r0
     f9a:	a1 1d       	adc	r26, r1
     f9c:	62 1f       	adc	r22, r18
     f9e:	73 9f       	mul	r23, r19
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	62 1f       	adc	r22, r18
     fa6:	83 9f       	mul	r24, r19
     fa8:	a0 0d       	add	r26, r0
     faa:	61 1d       	adc	r22, r1
     fac:	22 1f       	adc	r18, r18
     fae:	74 9f       	mul	r23, r20
     fb0:	33 27       	eor	r19, r19
     fb2:	a0 0d       	add	r26, r0
     fb4:	61 1d       	adc	r22, r1
     fb6:	23 1f       	adc	r18, r19
     fb8:	84 9f       	mul	r24, r20
     fba:	60 0d       	add	r22, r0
     fbc:	21 1d       	adc	r18, r1
     fbe:	82 2f       	mov	r24, r18
     fc0:	76 2f       	mov	r23, r22
     fc2:	6a 2f       	mov	r22, r26
     fc4:	11 24       	eor	r1, r1
     fc6:	9f 57       	subi	r25, 0x7F	; 127
     fc8:	50 40       	sbci	r21, 0x00	; 0
     fca:	9a f0       	brmi	.+38     	; 0xff2 <__mulsf3_pse+0x88>
     fcc:	f1 f0       	breq	.+60     	; 0x100a <__mulsf3_pse+0xa0>
     fce:	88 23       	and	r24, r24
     fd0:	4a f0       	brmi	.+18     	; 0xfe4 <__mulsf3_pse+0x7a>
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	bb 1f       	adc	r27, r27
     fd8:	66 1f       	adc	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	91 50       	subi	r25, 0x01	; 1
     fe0:	50 40       	sbci	r21, 0x00	; 0
     fe2:	a9 f7       	brne	.-22     	; 0xfce <__mulsf3_pse+0x64>
     fe4:	9e 3f       	cpi	r25, 0xFE	; 254
     fe6:	51 05       	cpc	r21, r1
     fe8:	80 f0       	brcs	.+32     	; 0x100a <__mulsf3_pse+0xa0>
     fea:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_inf>
     fee:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_szero>
     ff2:	5f 3f       	cpi	r21, 0xFF	; 255
     ff4:	e4 f3       	brlt	.-8      	; 0xfee <__mulsf3_pse+0x84>
     ff6:	98 3e       	cpi	r25, 0xE8	; 232
     ff8:	d4 f3       	brlt	.-12     	; 0xfee <__mulsf3_pse+0x84>
     ffa:	86 95       	lsr	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	b7 95       	ror	r27
    1002:	f7 95       	ror	r31
    1004:	e7 95       	ror	r30
    1006:	9f 5f       	subi	r25, 0xFF	; 255
    1008:	c1 f7       	brne	.-16     	; 0xffa <__mulsf3_pse+0x90>
    100a:	fe 2b       	or	r31, r30
    100c:	88 0f       	add	r24, r24
    100e:	91 1d       	adc	r25, r1
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	97 f9       	bld	r25, 7
    1016:	08 95       	ret
    1018:	19 f4       	brne	.+6      	; 0x1020 <__mulsf3_pse+0xb6>
    101a:	16 f4       	brtc	.+4      	; 0x1020 <__mulsf3_pse+0xb6>
    101c:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_nan>
    1020:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_mpack>

00001024 <sqrt>:
    1024:	0e 94 76 07 	call	0xeec	; 0xeec <__fp_splitA>
    1028:	b8 f3       	brcs	.-18     	; 0x1018 <__mulsf3_pse+0xae>
    102a:	99 23       	and	r25, r25
    102c:	c9 f3       	breq	.-14     	; 0x1020 <__mulsf3_pse+0xb6>
    102e:	b6 f3       	brts	.-20     	; 0x101c <__mulsf3_pse+0xb2>
    1030:	9f 57       	subi	r25, 0x7F	; 127
    1032:	55 0b       	sbc	r21, r21
    1034:	87 ff       	sbrs	r24, 7
    1036:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_norm2>
    103a:	00 24       	eor	r0, r0
    103c:	a0 e6       	ldi	r26, 0x60	; 96
    103e:	40 ea       	ldi	r20, 0xA0	; 160
    1040:	90 01       	movw	r18, r0
    1042:	80 58       	subi	r24, 0x80	; 128
    1044:	56 95       	lsr	r21
    1046:	97 95       	ror	r25
    1048:	28 f4       	brcc	.+10     	; 0x1054 <sqrt+0x30>
    104a:	80 5c       	subi	r24, 0xC0	; 192
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	20 f0       	brcs	.+8      	; 0x105c <sqrt+0x38>
    1054:	26 17       	cp	r18, r22
    1056:	37 07       	cpc	r19, r23
    1058:	48 07       	cpc	r20, r24
    105a:	30 f4       	brcc	.+12     	; 0x1068 <sqrt+0x44>
    105c:	62 1b       	sub	r22, r18
    105e:	73 0b       	sbc	r23, r19
    1060:	84 0b       	sbc	r24, r20
    1062:	20 29       	or	r18, r0
    1064:	31 29       	or	r19, r1
    1066:	4a 2b       	or	r20, r26
    1068:	a6 95       	lsr	r26
    106a:	17 94       	ror	r1
    106c:	07 94       	ror	r0
    106e:	20 25       	eor	r18, r0
    1070:	31 25       	eor	r19, r1
    1072:	4a 27       	eor	r20, r26
    1074:	58 f7       	brcc	.-42     	; 0x104c <sqrt+0x28>
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	20 f0       	brcs	.+8      	; 0x1086 <sqrt+0x62>
    107e:	26 17       	cp	r18, r22
    1080:	37 07       	cpc	r19, r23
    1082:	48 07       	cpc	r20, r24
    1084:	30 f4       	brcc	.+12     	; 0x1092 <sqrt+0x6e>
    1086:	62 0b       	sbc	r22, r18
    1088:	73 0b       	sbc	r23, r19
    108a:	84 0b       	sbc	r24, r20
    108c:	20 0d       	add	r18, r0
    108e:	31 1d       	adc	r19, r1
    1090:	41 1d       	adc	r20, r1
    1092:	a0 95       	com	r26
    1094:	81 f7       	brne	.-32     	; 0x1076 <sqrt+0x52>
    1096:	b9 01       	movw	r22, r18
    1098:	84 2f       	mov	r24, r20
    109a:	91 58       	subi	r25, 0x81	; 129
    109c:	88 0f       	add	r24, r24
    109e:	96 95       	lsr	r25
    10a0:	87 95       	ror	r24
    10a2:	08 95       	ret

000010a4 <square>:
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__mulsf3>

000010ac <__fp_mpack>:
    10ac:	9f 3f       	cpi	r25, 0xFF	; 255
    10ae:	31 f0       	breq	.+12     	; 0x10bc <__fp_mpack_finite+0xc>

000010b0 <__fp_mpack_finite>:
    10b0:	91 50       	subi	r25, 0x01	; 1
    10b2:	20 f4       	brcc	.+8      	; 0x10bc <__fp_mpack_finite+0xc>
    10b4:	87 95       	ror	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	88 0f       	add	r24, r24
    10be:	91 1d       	adc	r25, r1
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__fp_norm2>:
    10c8:	91 50       	subi	r25, 0x01	; 1
    10ca:	50 40       	sbci	r21, 0x00	; 0
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	88 1f       	adc	r24, r24
    10d2:	d2 f7       	brpl	.-12     	; 0x10c8 <__fp_norm2>
    10d4:	08 95       	ret

000010d6 <__udivmodsi4>:
    10d6:	a1 e2       	ldi	r26, 0x21	; 33
    10d8:	1a 2e       	mov	r1, r26
    10da:	aa 1b       	sub	r26, r26
    10dc:	bb 1b       	sub	r27, r27
    10de:	fd 01       	movw	r30, r26
    10e0:	0d c0       	rjmp	.+26     	; 0x10fc <__udivmodsi4_ep>

000010e2 <__udivmodsi4_loop>:
    10e2:	aa 1f       	adc	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	ee 1f       	adc	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	a2 17       	cp	r26, r18
    10ec:	b3 07       	cpc	r27, r19
    10ee:	e4 07       	cpc	r30, r20
    10f0:	f5 07       	cpc	r31, r21
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <__udivmodsi4_ep>
    10f4:	a2 1b       	sub	r26, r18
    10f6:	b3 0b       	sbc	r27, r19
    10f8:	e4 0b       	sbc	r30, r20
    10fa:	f5 0b       	sbc	r31, r21

000010fc <__udivmodsi4_ep>:
    10fc:	66 1f       	adc	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	1a 94       	dec	r1
    1106:	69 f7       	brne	.-38     	; 0x10e2 <__udivmodsi4_loop>
    1108:	60 95       	com	r22
    110a:	70 95       	com	r23
    110c:	80 95       	com	r24
    110e:	90 95       	com	r25
    1110:	9b 01       	movw	r18, r22
    1112:	ac 01       	movw	r20, r24
    1114:	bd 01       	movw	r22, r26
    1116:	cf 01       	movw	r24, r30
    1118:	08 95       	ret

0000111a <dtostrf>:
    111a:	ef 92       	push	r14
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	e8 01       	movw	r28, r16
    1126:	47 fd       	sbrc	r20, 7
    1128:	02 c0       	rjmp	.+4      	; 0x112e <dtostrf+0x14>
    112a:	34 e0       	ldi	r19, 0x04	; 4
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <dtostrf+0x16>
    112e:	34 e1       	ldi	r19, 0x14	; 20
    1130:	04 2e       	mov	r0, r20
    1132:	00 0c       	add	r0, r0
    1134:	55 0b       	sbc	r21, r21
    1136:	57 ff       	sbrs	r21, 7
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <dtostrf+0x26>
    113a:	51 95       	neg	r21
    113c:	41 95       	neg	r20
    113e:	51 09       	sbc	r21, r1
    1140:	e3 2e       	mov	r14, r19
    1142:	02 2f       	mov	r16, r18
    1144:	24 2f       	mov	r18, r20
    1146:	ae 01       	movw	r20, r28
    1148:	0e 94 b0 0a 	call	0x1560	; 0x1560 <dtoa_prf>
    114c:	ce 01       	movw	r24, r28
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ef 90       	pop	r14
    1158:	08 95       	ret

0000115a <sprintf>:
    115a:	ae e0       	ldi	r26, 0x0E	; 14
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 eb       	ldi	r30, 0xB3	; 179
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x1c>
    1166:	0d 89       	ldd	r16, Y+21	; 0x15
    1168:	1e 89       	ldd	r17, Y+22	; 0x16
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	8c 83       	std	Y+4, r24	; 0x04
    116e:	1a 83       	std	Y+2, r17	; 0x02
    1170:	09 83       	std	Y+1, r16	; 0x01
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f e7       	ldi	r25, 0x7F	; 127
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	ae 01       	movw	r20, r28
    117c:	47 5e       	subi	r20, 0xE7	; 231
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	6f 89       	ldd	r22, Y+23	; 0x17
    1182:	78 8d       	ldd	r23, Y+24	; 0x18
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	0e 94 cf 08 	call	0x119e	; 0x119e <vfprintf>
    118c:	ef 81       	ldd	r30, Y+7	; 0x07
    118e:	f8 85       	ldd	r31, Y+8	; 0x08
    1190:	e0 0f       	add	r30, r16
    1192:	f1 1f       	adc	r31, r17
    1194:	10 82       	st	Z, r1
    1196:	2e 96       	adiw	r28, 0x0e	; 14
    1198:	e4 e0       	ldi	r30, 0x04	; 4
    119a:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x1c>

0000119e <vfprintf>:
    119e:	ab e0       	ldi	r26, 0x0B	; 11
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 ed       	ldi	r30, 0xD5	; 213
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__prologue_saves__>
    11aa:	6c 01       	movw	r12, r24
    11ac:	7b 01       	movw	r14, r22
    11ae:	8a 01       	movw	r16, r20
    11b0:	fc 01       	movw	r30, r24
    11b2:	17 82       	std	Z+7, r1	; 0x07
    11b4:	16 82       	std	Z+6, r1	; 0x06
    11b6:	83 81       	ldd	r24, Z+3	; 0x03
    11b8:	81 ff       	sbrs	r24, 1
    11ba:	cc c1       	rjmp	.+920    	; 0x1554 <vfprintf+0x3b6>
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	3c 01       	movw	r6, r24
    11c2:	f6 01       	movw	r30, r12
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	f7 01       	movw	r30, r14
    11c8:	93 fd       	sbrc	r25, 3
    11ca:	85 91       	lpm	r24, Z+
    11cc:	93 ff       	sbrs	r25, 3
    11ce:	81 91       	ld	r24, Z+
    11d0:	7f 01       	movw	r14, r30
    11d2:	88 23       	and	r24, r24
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <vfprintf+0x3a>
    11d6:	ba c1       	rjmp	.+884    	; 0x154c <vfprintf+0x3ae>
    11d8:	85 32       	cpi	r24, 0x25	; 37
    11da:	39 f4       	brne	.+14     	; 0x11ea <vfprintf+0x4c>
    11dc:	93 fd       	sbrc	r25, 3
    11de:	85 91       	lpm	r24, Z+
    11e0:	93 ff       	sbrs	r25, 3
    11e2:	81 91       	ld	r24, Z+
    11e4:	7f 01       	movw	r14, r30
    11e6:	85 32       	cpi	r24, 0x25	; 37
    11e8:	29 f4       	brne	.+10     	; 0x11f4 <vfprintf+0x56>
    11ea:	b6 01       	movw	r22, r12
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    11f2:	e7 cf       	rjmp	.-50     	; 0x11c2 <vfprintf+0x24>
    11f4:	91 2c       	mov	r9, r1
    11f6:	21 2c       	mov	r2, r1
    11f8:	31 2c       	mov	r3, r1
    11fa:	ff e1       	ldi	r31, 0x1F	; 31
    11fc:	f3 15       	cp	r31, r3
    11fe:	d8 f0       	brcs	.+54     	; 0x1236 <vfprintf+0x98>
    1200:	8b 32       	cpi	r24, 0x2B	; 43
    1202:	79 f0       	breq	.+30     	; 0x1222 <vfprintf+0x84>
    1204:	38 f4       	brcc	.+14     	; 0x1214 <vfprintf+0x76>
    1206:	80 32       	cpi	r24, 0x20	; 32
    1208:	79 f0       	breq	.+30     	; 0x1228 <vfprintf+0x8a>
    120a:	83 32       	cpi	r24, 0x23	; 35
    120c:	a1 f4       	brne	.+40     	; 0x1236 <vfprintf+0x98>
    120e:	23 2d       	mov	r18, r3
    1210:	20 61       	ori	r18, 0x10	; 16
    1212:	1d c0       	rjmp	.+58     	; 0x124e <vfprintf+0xb0>
    1214:	8d 32       	cpi	r24, 0x2D	; 45
    1216:	61 f0       	breq	.+24     	; 0x1230 <vfprintf+0x92>
    1218:	80 33       	cpi	r24, 0x30	; 48
    121a:	69 f4       	brne	.+26     	; 0x1236 <vfprintf+0x98>
    121c:	23 2d       	mov	r18, r3
    121e:	21 60       	ori	r18, 0x01	; 1
    1220:	16 c0       	rjmp	.+44     	; 0x124e <vfprintf+0xb0>
    1222:	83 2d       	mov	r24, r3
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	38 2e       	mov	r3, r24
    1228:	e3 2d       	mov	r30, r3
    122a:	e4 60       	ori	r30, 0x04	; 4
    122c:	3e 2e       	mov	r3, r30
    122e:	2a c0       	rjmp	.+84     	; 0x1284 <vfprintf+0xe6>
    1230:	f3 2d       	mov	r31, r3
    1232:	f8 60       	ori	r31, 0x08	; 8
    1234:	1d c0       	rjmp	.+58     	; 0x1270 <vfprintf+0xd2>
    1236:	37 fc       	sbrc	r3, 7
    1238:	2d c0       	rjmp	.+90     	; 0x1294 <vfprintf+0xf6>
    123a:	20 ed       	ldi	r18, 0xD0	; 208
    123c:	28 0f       	add	r18, r24
    123e:	2a 30       	cpi	r18, 0x0A	; 10
    1240:	40 f0       	brcs	.+16     	; 0x1252 <vfprintf+0xb4>
    1242:	8e 32       	cpi	r24, 0x2E	; 46
    1244:	b9 f4       	brne	.+46     	; 0x1274 <vfprintf+0xd6>
    1246:	36 fc       	sbrc	r3, 6
    1248:	81 c1       	rjmp	.+770    	; 0x154c <vfprintf+0x3ae>
    124a:	23 2d       	mov	r18, r3
    124c:	20 64       	ori	r18, 0x40	; 64
    124e:	32 2e       	mov	r3, r18
    1250:	19 c0       	rjmp	.+50     	; 0x1284 <vfprintf+0xe6>
    1252:	36 fe       	sbrs	r3, 6
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <vfprintf+0xc4>
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    1258:	98 9e       	mul	r9, r24
    125a:	20 0d       	add	r18, r0
    125c:	11 24       	eor	r1, r1
    125e:	92 2e       	mov	r9, r18
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <vfprintf+0xe6>
    1262:	ea e0       	ldi	r30, 0x0A	; 10
    1264:	2e 9e       	mul	r2, r30
    1266:	20 0d       	add	r18, r0
    1268:	11 24       	eor	r1, r1
    126a:	22 2e       	mov	r2, r18
    126c:	f3 2d       	mov	r31, r3
    126e:	f0 62       	ori	r31, 0x20	; 32
    1270:	3f 2e       	mov	r3, r31
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <vfprintf+0xe6>
    1274:	8c 36       	cpi	r24, 0x6C	; 108
    1276:	21 f4       	brne	.+8      	; 0x1280 <vfprintf+0xe2>
    1278:	83 2d       	mov	r24, r3
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	38 2e       	mov	r3, r24
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0xe6>
    1280:	88 36       	cpi	r24, 0x68	; 104
    1282:	41 f4       	brne	.+16     	; 0x1294 <vfprintf+0xf6>
    1284:	f7 01       	movw	r30, r14
    1286:	93 fd       	sbrc	r25, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	93 ff       	sbrs	r25, 3
    128c:	81 91       	ld	r24, Z+
    128e:	7f 01       	movw	r14, r30
    1290:	81 11       	cpse	r24, r1
    1292:	b3 cf       	rjmp	.-154    	; 0x11fa <vfprintf+0x5c>
    1294:	98 2f       	mov	r25, r24
    1296:	9f 7d       	andi	r25, 0xDF	; 223
    1298:	95 54       	subi	r25, 0x45	; 69
    129a:	93 30       	cpi	r25, 0x03	; 3
    129c:	28 f4       	brcc	.+10     	; 0x12a8 <vfprintf+0x10a>
    129e:	0c 5f       	subi	r16, 0xFC	; 252
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	9f e3       	ldi	r25, 0x3F	; 63
    12a4:	99 83       	std	Y+1, r25	; 0x01
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <vfprintf+0x124>
    12a8:	83 36       	cpi	r24, 0x63	; 99
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <vfprintf+0x11a>
    12ac:	83 37       	cpi	r24, 0x73	; 115
    12ae:	71 f0       	breq	.+28     	; 0x12cc <vfprintf+0x12e>
    12b0:	83 35       	cpi	r24, 0x53	; 83
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <vfprintf+0x118>
    12b4:	59 c0       	rjmp	.+178    	; 0x1368 <vfprintf+0x1ca>
    12b6:	21 c0       	rjmp	.+66     	; 0x12fa <vfprintf+0x15c>
    12b8:	f8 01       	movw	r30, r16
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	0e 5f       	subi	r16, 0xFE	; 254
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	88 24       	eor	r8, r8
    12c4:	83 94       	inc	r8
    12c6:	91 2c       	mov	r9, r1
    12c8:	53 01       	movw	r10, r6
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <vfprintf+0x154>
    12cc:	28 01       	movw	r4, r16
    12ce:	f2 e0       	ldi	r31, 0x02	; 2
    12d0:	4f 0e       	add	r4, r31
    12d2:	51 1c       	adc	r5, r1
    12d4:	f8 01       	movw	r30, r16
    12d6:	a0 80       	ld	r10, Z
    12d8:	b1 80       	ldd	r11, Z+1	; 0x01
    12da:	36 fe       	sbrs	r3, 6
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <vfprintf+0x146>
    12de:	69 2d       	mov	r22, r9
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vfprintf+0x14a>
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	7f ef       	ldi	r23, 0xFF	; 255
    12e8:	c5 01       	movw	r24, r10
    12ea:	0e 94 ed 0c 	call	0x19da	; 0x19da <strnlen>
    12ee:	4c 01       	movw	r8, r24
    12f0:	82 01       	movw	r16, r4
    12f2:	f3 2d       	mov	r31, r3
    12f4:	ff 77       	andi	r31, 0x7F	; 127
    12f6:	3f 2e       	mov	r3, r31
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <vfprintf+0x188>
    12fa:	28 01       	movw	r4, r16
    12fc:	22 e0       	ldi	r18, 0x02	; 2
    12fe:	42 0e       	add	r4, r18
    1300:	51 1c       	adc	r5, r1
    1302:	f8 01       	movw	r30, r16
    1304:	a0 80       	ld	r10, Z
    1306:	b1 80       	ldd	r11, Z+1	; 0x01
    1308:	36 fe       	sbrs	r3, 6
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <vfprintf+0x174>
    130c:	69 2d       	mov	r22, r9
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x178>
    1312:	6f ef       	ldi	r22, 0xFF	; 255
    1314:	7f ef       	ldi	r23, 0xFF	; 255
    1316:	c5 01       	movw	r24, r10
    1318:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <strnlen_P>
    131c:	4c 01       	movw	r8, r24
    131e:	f3 2d       	mov	r31, r3
    1320:	f0 68       	ori	r31, 0x80	; 128
    1322:	3f 2e       	mov	r3, r31
    1324:	82 01       	movw	r16, r4
    1326:	33 fc       	sbrc	r3, 3
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <vfprintf+0x1c2>
    132a:	82 2d       	mov	r24, r2
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	88 16       	cp	r8, r24
    1330:	99 06       	cpc	r9, r25
    1332:	b0 f4       	brcc	.+44     	; 0x1360 <vfprintf+0x1c2>
    1334:	b6 01       	movw	r22, r12
    1336:	80 e2       	ldi	r24, 0x20	; 32
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    133e:	2a 94       	dec	r2
    1340:	f4 cf       	rjmp	.-24     	; 0x132a <vfprintf+0x18c>
    1342:	f5 01       	movw	r30, r10
    1344:	37 fc       	sbrc	r3, 7
    1346:	85 91       	lpm	r24, Z+
    1348:	37 fe       	sbrs	r3, 7
    134a:	81 91       	ld	r24, Z+
    134c:	5f 01       	movw	r10, r30
    134e:	b6 01       	movw	r22, r12
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    1356:	21 10       	cpse	r2, r1
    1358:	2a 94       	dec	r2
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	82 1a       	sub	r8, r18
    135e:	91 08       	sbc	r9, r1
    1360:	81 14       	cp	r8, r1
    1362:	91 04       	cpc	r9, r1
    1364:	71 f7       	brne	.-36     	; 0x1342 <vfprintf+0x1a4>
    1366:	e8 c0       	rjmp	.+464    	; 0x1538 <vfprintf+0x39a>
    1368:	84 36       	cpi	r24, 0x64	; 100
    136a:	11 f0       	breq	.+4      	; 0x1370 <vfprintf+0x1d2>
    136c:	89 36       	cpi	r24, 0x69	; 105
    136e:	41 f5       	brne	.+80     	; 0x13c0 <vfprintf+0x222>
    1370:	f8 01       	movw	r30, r16
    1372:	37 fe       	sbrs	r3, 7
    1374:	07 c0       	rjmp	.+14     	; 0x1384 <vfprintf+0x1e6>
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	0c 5f       	subi	r16, 0xFC	; 252
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <vfprintf+0x1f6>
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	07 2e       	mov	r0, r23
    138a:	00 0c       	add	r0, r0
    138c:	88 0b       	sbc	r24, r24
    138e:	99 0b       	sbc	r25, r25
    1390:	0e 5f       	subi	r16, 0xFE	; 254
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	f3 2d       	mov	r31, r3
    1396:	ff 76       	andi	r31, 0x6F	; 111
    1398:	3f 2e       	mov	r3, r31
    139a:	97 ff       	sbrs	r25, 7
    139c:	09 c0       	rjmp	.+18     	; 0x13b0 <vfprintf+0x212>
    139e:	90 95       	com	r25
    13a0:	80 95       	com	r24
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	f0 68       	ori	r31, 0x80	; 128
    13ae:	3f 2e       	mov	r3, r31
    13b0:	2a e0       	ldi	r18, 0x0A	; 10
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	a3 01       	movw	r20, r6
    13b6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__ultoa_invert>
    13ba:	88 2e       	mov	r8, r24
    13bc:	86 18       	sub	r8, r6
    13be:	45 c0       	rjmp	.+138    	; 0x144a <vfprintf+0x2ac>
    13c0:	85 37       	cpi	r24, 0x75	; 117
    13c2:	31 f4       	brne	.+12     	; 0x13d0 <vfprintf+0x232>
    13c4:	23 2d       	mov	r18, r3
    13c6:	2f 7e       	andi	r18, 0xEF	; 239
    13c8:	b2 2e       	mov	r11, r18
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	25 c0       	rjmp	.+74     	; 0x141a <vfprintf+0x27c>
    13d0:	93 2d       	mov	r25, r3
    13d2:	99 7f       	andi	r25, 0xF9	; 249
    13d4:	b9 2e       	mov	r11, r25
    13d6:	8f 36       	cpi	r24, 0x6F	; 111
    13d8:	c1 f0       	breq	.+48     	; 0x140a <vfprintf+0x26c>
    13da:	18 f4       	brcc	.+6      	; 0x13e2 <vfprintf+0x244>
    13dc:	88 35       	cpi	r24, 0x58	; 88
    13de:	79 f0       	breq	.+30     	; 0x13fe <vfprintf+0x260>
    13e0:	b5 c0       	rjmp	.+362    	; 0x154c <vfprintf+0x3ae>
    13e2:	80 37       	cpi	r24, 0x70	; 112
    13e4:	19 f0       	breq	.+6      	; 0x13ec <vfprintf+0x24e>
    13e6:	88 37       	cpi	r24, 0x78	; 120
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <vfprintf+0x254>
    13ea:	b0 c0       	rjmp	.+352    	; 0x154c <vfprintf+0x3ae>
    13ec:	e9 2f       	mov	r30, r25
    13ee:	e0 61       	ori	r30, 0x10	; 16
    13f0:	be 2e       	mov	r11, r30
    13f2:	b4 fe       	sbrs	r11, 4
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x272>
    13f6:	fb 2d       	mov	r31, r11
    13f8:	f4 60       	ori	r31, 0x04	; 4
    13fa:	bf 2e       	mov	r11, r31
    13fc:	09 c0       	rjmp	.+18     	; 0x1410 <vfprintf+0x272>
    13fe:	34 fe       	sbrs	r3, 4
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <vfprintf+0x278>
    1402:	29 2f       	mov	r18, r25
    1404:	26 60       	ori	r18, 0x06	; 6
    1406:	b2 2e       	mov	r11, r18
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0x278>
    140a:	28 e0       	ldi	r18, 0x08	; 8
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	05 c0       	rjmp	.+10     	; 0x141a <vfprintf+0x27c>
    1410:	20 e1       	ldi	r18, 0x10	; 16
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x27c>
    1416:	20 e1       	ldi	r18, 0x10	; 16
    1418:	32 e0       	ldi	r19, 0x02	; 2
    141a:	f8 01       	movw	r30, r16
    141c:	b7 fe       	sbrs	r11, 7
    141e:	07 c0       	rjmp	.+14     	; 0x142e <vfprintf+0x290>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	0c 5f       	subi	r16, 0xFC	; 252
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0x29c>
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	a3 01       	movw	r20, r6
    143c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__ultoa_invert>
    1440:	88 2e       	mov	r8, r24
    1442:	86 18       	sub	r8, r6
    1444:	fb 2d       	mov	r31, r11
    1446:	ff 77       	andi	r31, 0x7F	; 127
    1448:	3f 2e       	mov	r3, r31
    144a:	36 fe       	sbrs	r3, 6
    144c:	0d c0       	rjmp	.+26     	; 0x1468 <vfprintf+0x2ca>
    144e:	23 2d       	mov	r18, r3
    1450:	2e 7f       	andi	r18, 0xFE	; 254
    1452:	a2 2e       	mov	r10, r18
    1454:	89 14       	cp	r8, r9
    1456:	58 f4       	brcc	.+22     	; 0x146e <vfprintf+0x2d0>
    1458:	34 fe       	sbrs	r3, 4
    145a:	0b c0       	rjmp	.+22     	; 0x1472 <vfprintf+0x2d4>
    145c:	32 fc       	sbrc	r3, 2
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <vfprintf+0x2d4>
    1460:	83 2d       	mov	r24, r3
    1462:	8e 7e       	andi	r24, 0xEE	; 238
    1464:	a8 2e       	mov	r10, r24
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <vfprintf+0x2d4>
    1468:	b8 2c       	mov	r11, r8
    146a:	a3 2c       	mov	r10, r3
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x2d6>
    146e:	b8 2c       	mov	r11, r8
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <vfprintf+0x2d6>
    1472:	b9 2c       	mov	r11, r9
    1474:	a4 fe       	sbrs	r10, 4
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <vfprintf+0x2f8>
    1478:	fe 01       	movw	r30, r28
    147a:	e8 0d       	add	r30, r8
    147c:	f1 1d       	adc	r31, r1
    147e:	80 81       	ld	r24, Z
    1480:	80 33       	cpi	r24, 0x30	; 48
    1482:	21 f4       	brne	.+8      	; 0x148c <vfprintf+0x2ee>
    1484:	9a 2d       	mov	r25, r10
    1486:	99 7e       	andi	r25, 0xE9	; 233
    1488:	a9 2e       	mov	r10, r25
    148a:	09 c0       	rjmp	.+18     	; 0x149e <vfprintf+0x300>
    148c:	a2 fe       	sbrs	r10, 2
    148e:	06 c0       	rjmp	.+12     	; 0x149c <vfprintf+0x2fe>
    1490:	b3 94       	inc	r11
    1492:	b3 94       	inc	r11
    1494:	04 c0       	rjmp	.+8      	; 0x149e <vfprintf+0x300>
    1496:	8a 2d       	mov	r24, r10
    1498:	86 78       	andi	r24, 0x86	; 134
    149a:	09 f0       	breq	.+2      	; 0x149e <vfprintf+0x300>
    149c:	b3 94       	inc	r11
    149e:	a3 fc       	sbrc	r10, 3
    14a0:	11 c0       	rjmp	.+34     	; 0x14c4 <vfprintf+0x326>
    14a2:	a0 fe       	sbrs	r10, 0
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x314>
    14a6:	b2 14       	cp	r11, r2
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <vfprintf+0x32e>
    14aa:	28 0c       	add	r2, r8
    14ac:	92 2c       	mov	r9, r2
    14ae:	9b 18       	sub	r9, r11
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <vfprintf+0x330>
    14b2:	b2 14       	cp	r11, r2
    14b4:	60 f4       	brcc	.+24     	; 0x14ce <vfprintf+0x330>
    14b6:	b6 01       	movw	r22, r12
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    14c0:	b3 94       	inc	r11
    14c2:	f7 cf       	rjmp	.-18     	; 0x14b2 <vfprintf+0x314>
    14c4:	b2 14       	cp	r11, r2
    14c6:	18 f4       	brcc	.+6      	; 0x14ce <vfprintf+0x330>
    14c8:	2b 18       	sub	r2, r11
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfprintf+0x332>
    14cc:	98 2c       	mov	r9, r8
    14ce:	21 2c       	mov	r2, r1
    14d0:	a4 fe       	sbrs	r10, 4
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <vfprintf+0x356>
    14d4:	b6 01       	movw	r22, r12
    14d6:	80 e3       	ldi	r24, 0x30	; 48
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    14de:	a2 fe       	sbrs	r10, 2
    14e0:	17 c0       	rjmp	.+46     	; 0x1510 <vfprintf+0x372>
    14e2:	a1 fc       	sbrc	r10, 1
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <vfprintf+0x34e>
    14e6:	88 e7       	ldi	r24, 0x78	; 120
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <vfprintf+0x352>
    14ec:	88 e5       	ldi	r24, 0x58	; 88
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	b6 01       	movw	r22, r12
    14f2:	0c c0       	rjmp	.+24     	; 0x150c <vfprintf+0x36e>
    14f4:	8a 2d       	mov	r24, r10
    14f6:	86 78       	andi	r24, 0x86	; 134
    14f8:	59 f0       	breq	.+22     	; 0x1510 <vfprintf+0x372>
    14fa:	a1 fe       	sbrs	r10, 1
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <vfprintf+0x364>
    14fe:	8b e2       	ldi	r24, 0x2B	; 43
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <vfprintf+0x366>
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	a7 fc       	sbrc	r10, 7
    1506:	8d e2       	ldi	r24, 0x2D	; 45
    1508:	b6 01       	movw	r22, r12
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    1510:	89 14       	cp	r8, r9
    1512:	38 f4       	brcc	.+14     	; 0x1522 <vfprintf+0x384>
    1514:	b6 01       	movw	r22, r12
    1516:	80 e3       	ldi	r24, 0x30	; 48
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    151e:	9a 94       	dec	r9
    1520:	f7 cf       	rjmp	.-18     	; 0x1510 <vfprintf+0x372>
    1522:	8a 94       	dec	r8
    1524:	f3 01       	movw	r30, r6
    1526:	e8 0d       	add	r30, r8
    1528:	f1 1d       	adc	r31, r1
    152a:	80 81       	ld	r24, Z
    152c:	b6 01       	movw	r22, r12
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    1534:	81 10       	cpse	r8, r1
    1536:	f5 cf       	rjmp	.-22     	; 0x1522 <vfprintf+0x384>
    1538:	22 20       	and	r2, r2
    153a:	09 f4       	brne	.+2      	; 0x153e <vfprintf+0x3a0>
    153c:	42 ce       	rjmp	.-892    	; 0x11c2 <vfprintf+0x24>
    153e:	b6 01       	movw	r22, r12
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <fputc>
    1548:	2a 94       	dec	r2
    154a:	f6 cf       	rjmp	.-20     	; 0x1538 <vfprintf+0x39a>
    154c:	f6 01       	movw	r30, r12
    154e:	86 81       	ldd	r24, Z+6	; 0x06
    1550:	97 81       	ldd	r25, Z+7	; 0x07
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vfprintf+0x3ba>
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	2b 96       	adiw	r28, 0x0b	; 11
    155a:	e2 e1       	ldi	r30, 0x12	; 18
    155c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__epilogue_restores__>

00001560 <dtoa_prf>:
    1560:	a9 e0       	ldi	r26, 0x09	; 9
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__prologue_saves__+0xc>
    156c:	6a 01       	movw	r12, r20
    156e:	12 2f       	mov	r17, r18
    1570:	b0 2e       	mov	r11, r16
    1572:	2b e3       	ldi	r18, 0x3B	; 59
    1574:	20 17       	cp	r18, r16
    1576:	20 f0       	brcs	.+8      	; 0x1580 <dtoa_prf+0x20>
    1578:	ff 24       	eor	r15, r15
    157a:	f3 94       	inc	r15
    157c:	f0 0e       	add	r15, r16
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <dtoa_prf+0x24>
    1580:	2c e3       	ldi	r18, 0x3C	; 60
    1582:	f2 2e       	mov	r15, r18
    1584:	0f 2d       	mov	r16, r15
    1586:	27 e0       	ldi	r18, 0x07	; 7
    1588:	ae 01       	movw	r20, r28
    158a:	4f 5f       	subi	r20, 0xFF	; 255
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__ftoa_engine>
    1592:	bc 01       	movw	r22, r24
    1594:	49 81       	ldd	r20, Y+1	; 0x01
    1596:	84 2f       	mov	r24, r20
    1598:	89 70       	andi	r24, 0x09	; 9
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	31 f0       	breq	.+12     	; 0x15aa <dtoa_prf+0x4a>
    159e:	e1 fc       	sbrc	r14, 1
    15a0:	06 c0       	rjmp	.+12     	; 0x15ae <dtoa_prf+0x4e>
    15a2:	e0 fe       	sbrs	r14, 0
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <dtoa_prf+0x52>
    15a6:	90 e2       	ldi	r25, 0x20	; 32
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <dtoa_prf+0x54>
    15aa:	9d e2       	ldi	r25, 0x2D	; 45
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <dtoa_prf+0x54>
    15ae:	9b e2       	ldi	r25, 0x2B	; 43
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <dtoa_prf+0x54>
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	5e 2d       	mov	r21, r14
    15b6:	50 71       	andi	r21, 0x10	; 16
    15b8:	43 ff       	sbrs	r20, 3
    15ba:	3c c0       	rjmp	.+120    	; 0x1634 <dtoa_prf+0xd4>
    15bc:	91 11       	cpse	r25, r1
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <dtoa_prf+0x64>
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <dtoa_prf+0x66>
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	81 17       	cp	r24, r17
    15c8:	18 f4       	brcc	.+6      	; 0x15d0 <dtoa_prf+0x70>
    15ca:	21 2f       	mov	r18, r17
    15cc:	28 1b       	sub	r18, r24
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <dtoa_prf+0x72>
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	51 11       	cpse	r21, r1
    15d4:	0b c0       	rjmp	.+22     	; 0x15ec <dtoa_prf+0x8c>
    15d6:	f6 01       	movw	r30, r12
    15d8:	82 2f       	mov	r24, r18
    15da:	30 e2       	ldi	r19, 0x20	; 32
    15dc:	88 23       	and	r24, r24
    15de:	19 f0       	breq	.+6      	; 0x15e6 <dtoa_prf+0x86>
    15e0:	31 93       	st	Z+, r19
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	fb cf       	rjmp	.-10     	; 0x15dc <dtoa_prf+0x7c>
    15e6:	c2 0e       	add	r12, r18
    15e8:	d1 1c       	adc	r13, r1
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	99 23       	and	r25, r25
    15ee:	29 f0       	breq	.+10     	; 0x15fa <dtoa_prf+0x9a>
    15f0:	d6 01       	movw	r26, r12
    15f2:	9c 93       	st	X, r25
    15f4:	f6 01       	movw	r30, r12
    15f6:	31 96       	adiw	r30, 0x01	; 1
    15f8:	6f 01       	movw	r12, r30
    15fa:	c6 01       	movw	r24, r12
    15fc:	03 96       	adiw	r24, 0x03	; 3
    15fe:	e2 fe       	sbrs	r14, 2
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <dtoa_prf+0xb6>
    1602:	3e e4       	ldi	r19, 0x4E	; 78
    1604:	d6 01       	movw	r26, r12
    1606:	3c 93       	st	X, r19
    1608:	41 e4       	ldi	r20, 0x41	; 65
    160a:	11 96       	adiw	r26, 0x01	; 1
    160c:	4c 93       	st	X, r20
    160e:	11 97       	sbiw	r26, 0x01	; 1
    1610:	12 96       	adiw	r26, 0x02	; 2
    1612:	3c 93       	st	X, r19
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <dtoa_prf+0xc2>
    1616:	3e e6       	ldi	r19, 0x6E	; 110
    1618:	f6 01       	movw	r30, r12
    161a:	30 83       	st	Z, r19
    161c:	41 e6       	ldi	r20, 0x61	; 97
    161e:	41 83       	std	Z+1, r20	; 0x01
    1620:	32 83       	std	Z+2, r19	; 0x02
    1622:	fc 01       	movw	r30, r24
    1624:	32 2f       	mov	r19, r18
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	33 23       	and	r19, r19
    162a:	09 f4       	brne	.+2      	; 0x162e <dtoa_prf+0xce>
    162c:	42 c0       	rjmp	.+132    	; 0x16b2 <dtoa_prf+0x152>
    162e:	41 93       	st	Z+, r20
    1630:	31 50       	subi	r19, 0x01	; 1
    1632:	fa cf       	rjmp	.-12     	; 0x1628 <dtoa_prf+0xc8>
    1634:	42 ff       	sbrs	r20, 2
    1636:	44 c0       	rjmp	.+136    	; 0x16c0 <dtoa_prf+0x160>
    1638:	91 11       	cpse	r25, r1
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <dtoa_prf+0xe0>
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <dtoa_prf+0xe2>
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	81 17       	cp	r24, r17
    1644:	18 f4       	brcc	.+6      	; 0x164c <dtoa_prf+0xec>
    1646:	21 2f       	mov	r18, r17
    1648:	28 1b       	sub	r18, r24
    164a:	01 c0       	rjmp	.+2      	; 0x164e <dtoa_prf+0xee>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	51 11       	cpse	r21, r1
    1650:	0b c0       	rjmp	.+22     	; 0x1668 <dtoa_prf+0x108>
    1652:	f6 01       	movw	r30, r12
    1654:	82 2f       	mov	r24, r18
    1656:	30 e2       	ldi	r19, 0x20	; 32
    1658:	88 23       	and	r24, r24
    165a:	19 f0       	breq	.+6      	; 0x1662 <dtoa_prf+0x102>
    165c:	31 93       	st	Z+, r19
    165e:	81 50       	subi	r24, 0x01	; 1
    1660:	fb cf       	rjmp	.-10     	; 0x1658 <dtoa_prf+0xf8>
    1662:	c2 0e       	add	r12, r18
    1664:	d1 1c       	adc	r13, r1
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	99 23       	and	r25, r25
    166a:	29 f0       	breq	.+10     	; 0x1676 <dtoa_prf+0x116>
    166c:	d6 01       	movw	r26, r12
    166e:	9c 93       	st	X, r25
    1670:	f6 01       	movw	r30, r12
    1672:	31 96       	adiw	r30, 0x01	; 1
    1674:	6f 01       	movw	r12, r30
    1676:	c6 01       	movw	r24, r12
    1678:	03 96       	adiw	r24, 0x03	; 3
    167a:	e2 fe       	sbrs	r14, 2
    167c:	0b c0       	rjmp	.+22     	; 0x1694 <dtoa_prf+0x134>
    167e:	39 e4       	ldi	r19, 0x49	; 73
    1680:	d6 01       	movw	r26, r12
    1682:	3c 93       	st	X, r19
    1684:	3e e4       	ldi	r19, 0x4E	; 78
    1686:	11 96       	adiw	r26, 0x01	; 1
    1688:	3c 93       	st	X, r19
    168a:	11 97       	sbiw	r26, 0x01	; 1
    168c:	36 e4       	ldi	r19, 0x46	; 70
    168e:	12 96       	adiw	r26, 0x02	; 2
    1690:	3c 93       	st	X, r19
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <dtoa_prf+0x142>
    1694:	39 e6       	ldi	r19, 0x69	; 105
    1696:	f6 01       	movw	r30, r12
    1698:	30 83       	st	Z, r19
    169a:	3e e6       	ldi	r19, 0x6E	; 110
    169c:	31 83       	std	Z+1, r19	; 0x01
    169e:	36 e6       	ldi	r19, 0x66	; 102
    16a0:	32 83       	std	Z+2, r19	; 0x02
    16a2:	fc 01       	movw	r30, r24
    16a4:	32 2f       	mov	r19, r18
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	33 23       	and	r19, r19
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <dtoa_prf+0x152>
    16ac:	41 93       	st	Z+, r20
    16ae:	31 50       	subi	r19, 0x01	; 1
    16b0:	fb cf       	rjmp	.-10     	; 0x16a8 <dtoa_prf+0x148>
    16b2:	fc 01       	movw	r30, r24
    16b4:	e2 0f       	add	r30, r18
    16b6:	f1 1d       	adc	r31, r1
    16b8:	10 82       	st	Z, r1
    16ba:	8e ef       	ldi	r24, 0xFE	; 254
    16bc:	9f ef       	ldi	r25, 0xFF	; 255
    16be:	a6 c0       	rjmp	.+332    	; 0x180c <dtoa_prf+0x2ac>
    16c0:	21 e0       	ldi	r18, 0x01	; 1
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	91 11       	cpse	r25, r1
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <dtoa_prf+0x16c>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	16 16       	cp	r1, r22
    16ce:	17 06       	cpc	r1, r23
    16d0:	1c f4       	brge	.+6      	; 0x16d8 <dtoa_prf+0x178>
    16d2:	fb 01       	movw	r30, r22
    16d4:	31 96       	adiw	r30, 0x01	; 1
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <dtoa_prf+0x17c>
    16d8:	e1 e0       	ldi	r30, 0x01	; 1
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	2e 0f       	add	r18, r30
    16de:	3f 1f       	adc	r19, r31
    16e0:	bb 20       	and	r11, r11
    16e2:	21 f0       	breq	.+8      	; 0x16ec <dtoa_prf+0x18c>
    16e4:	eb 2d       	mov	r30, r11
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	31 96       	adiw	r30, 0x01	; 1
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <dtoa_prf+0x190>
    16ec:	e0 e0       	ldi	r30, 0x00	; 0
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	2e 0f       	add	r18, r30
    16f2:	3f 1f       	adc	r19, r31
    16f4:	e1 2f       	mov	r30, r17
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	2e 17       	cp	r18, r30
    16fa:	3f 07       	cpc	r19, r31
    16fc:	1c f4       	brge	.+6      	; 0x1704 <dtoa_prf+0x1a4>
    16fe:	12 1b       	sub	r17, r18
    1700:	21 2f       	mov	r18, r17
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <dtoa_prf+0x1a6>
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	8e 2d       	mov	r24, r14
    1708:	88 71       	andi	r24, 0x18	; 24
    170a:	59 f4       	brne	.+22     	; 0x1722 <dtoa_prf+0x1c2>
    170c:	f6 01       	movw	r30, r12
    170e:	82 2f       	mov	r24, r18
    1710:	30 e2       	ldi	r19, 0x20	; 32
    1712:	88 23       	and	r24, r24
    1714:	19 f0       	breq	.+6      	; 0x171c <dtoa_prf+0x1bc>
    1716:	31 93       	st	Z+, r19
    1718:	81 50       	subi	r24, 0x01	; 1
    171a:	fb cf       	rjmp	.-10     	; 0x1712 <dtoa_prf+0x1b2>
    171c:	c2 0e       	add	r12, r18
    171e:	d1 1c       	adc	r13, r1
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	99 23       	and	r25, r25
    1724:	29 f0       	breq	.+10     	; 0x1730 <dtoa_prf+0x1d0>
    1726:	d6 01       	movw	r26, r12
    1728:	9c 93       	st	X, r25
    172a:	f6 01       	movw	r30, r12
    172c:	31 96       	adiw	r30, 0x01	; 1
    172e:	6f 01       	movw	r12, r30
    1730:	51 11       	cpse	r21, r1
    1732:	0b c0       	rjmp	.+22     	; 0x174a <dtoa_prf+0x1ea>
    1734:	f6 01       	movw	r30, r12
    1736:	82 2f       	mov	r24, r18
    1738:	90 e3       	ldi	r25, 0x30	; 48
    173a:	88 23       	and	r24, r24
    173c:	19 f0       	breq	.+6      	; 0x1744 <dtoa_prf+0x1e4>
    173e:	91 93       	st	Z+, r25
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	fb cf       	rjmp	.-10     	; 0x173a <dtoa_prf+0x1da>
    1744:	c2 0e       	add	r12, r18
    1746:	d1 1c       	adc	r13, r1
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	0f 2d       	mov	r16, r15
    174c:	06 0f       	add	r16, r22
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	34 2f       	mov	r19, r20
    1752:	30 71       	andi	r19, 0x10	; 16
    1754:	44 ff       	sbrs	r20, 4
    1756:	03 c0       	rjmp	.+6      	; 0x175e <dtoa_prf+0x1fe>
    1758:	91 33       	cpi	r25, 0x31	; 49
    175a:	09 f4       	brne	.+2      	; 0x175e <dtoa_prf+0x1fe>
    175c:	01 50       	subi	r16, 0x01	; 1
    175e:	10 16       	cp	r1, r16
    1760:	24 f4       	brge	.+8      	; 0x176a <dtoa_prf+0x20a>
    1762:	09 30       	cpi	r16, 0x09	; 9
    1764:	18 f0       	brcs	.+6      	; 0x176c <dtoa_prf+0x20c>
    1766:	08 e0       	ldi	r16, 0x08	; 8
    1768:	01 c0       	rjmp	.+2      	; 0x176c <dtoa_prf+0x20c>
    176a:	01 e0       	ldi	r16, 0x01	; 1
    176c:	ab 01       	movw	r20, r22
    176e:	77 ff       	sbrs	r23, 7
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <dtoa_prf+0x216>
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	fb 01       	movw	r30, r22
    1778:	e4 1b       	sub	r30, r20
    177a:	f5 0b       	sbc	r31, r21
    177c:	a1 e0       	ldi	r26, 0x01	; 1
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ac 0f       	add	r26, r28
    1782:	bd 1f       	adc	r27, r29
    1784:	ea 0f       	add	r30, r26
    1786:	fb 1f       	adc	r31, r27
    1788:	8e e2       	ldi	r24, 0x2E	; 46
    178a:	a8 2e       	mov	r10, r24
    178c:	4b 01       	movw	r8, r22
    178e:	80 1a       	sub	r8, r16
    1790:	91 08       	sbc	r9, r1
    1792:	0b 2d       	mov	r16, r11
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	11 95       	neg	r17
    1798:	01 95       	neg	r16
    179a:	11 09       	sbc	r17, r1
    179c:	4f 3f       	cpi	r20, 0xFF	; 255
    179e:	bf ef       	ldi	r27, 0xFF	; 255
    17a0:	5b 07       	cpc	r21, r27
    17a2:	21 f4       	brne	.+8      	; 0x17ac <dtoa_prf+0x24c>
    17a4:	d6 01       	movw	r26, r12
    17a6:	ac 92       	st	X, r10
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	6d 01       	movw	r12, r26
    17ac:	64 17       	cp	r22, r20
    17ae:	75 07       	cpc	r23, r21
    17b0:	2c f0       	brlt	.+10     	; 0x17bc <dtoa_prf+0x25c>
    17b2:	84 16       	cp	r8, r20
    17b4:	95 06       	cpc	r9, r21
    17b6:	14 f4       	brge	.+4      	; 0x17bc <dtoa_prf+0x25c>
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <dtoa_prf+0x25e>
    17bc:	80 e3       	ldi	r24, 0x30	; 48
    17be:	41 50       	subi	r20, 0x01	; 1
    17c0:	51 09       	sbc	r21, r1
    17c2:	31 96       	adiw	r30, 0x01	; 1
    17c4:	d6 01       	movw	r26, r12
    17c6:	11 96       	adiw	r26, 0x01	; 1
    17c8:	7d 01       	movw	r14, r26
    17ca:	40 17       	cp	r20, r16
    17cc:	51 07       	cpc	r21, r17
    17ce:	24 f0       	brlt	.+8      	; 0x17d8 <dtoa_prf+0x278>
    17d0:	d6 01       	movw	r26, r12
    17d2:	8c 93       	st	X, r24
    17d4:	67 01       	movw	r12, r14
    17d6:	e2 cf       	rjmp	.-60     	; 0x179c <dtoa_prf+0x23c>
    17d8:	64 17       	cp	r22, r20
    17da:	75 07       	cpc	r23, r21
    17dc:	39 f4       	brne	.+14     	; 0x17ec <dtoa_prf+0x28c>
    17de:	96 33       	cpi	r25, 0x36	; 54
    17e0:	20 f4       	brcc	.+8      	; 0x17ea <dtoa_prf+0x28a>
    17e2:	95 33       	cpi	r25, 0x35	; 53
    17e4:	19 f4       	brne	.+6      	; 0x17ec <dtoa_prf+0x28c>
    17e6:	31 11       	cpse	r19, r1
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <dtoa_prf+0x28c>
    17ea:	81 e3       	ldi	r24, 0x31	; 49
    17ec:	f6 01       	movw	r30, r12
    17ee:	80 83       	st	Z, r24
    17f0:	f7 01       	movw	r30, r14
    17f2:	82 2f       	mov	r24, r18
    17f4:	90 e2       	ldi	r25, 0x20	; 32
    17f6:	88 23       	and	r24, r24
    17f8:	19 f0       	breq	.+6      	; 0x1800 <dtoa_prf+0x2a0>
    17fa:	91 93       	st	Z+, r25
    17fc:	81 50       	subi	r24, 0x01	; 1
    17fe:	fb cf       	rjmp	.-10     	; 0x17f6 <dtoa_prf+0x296>
    1800:	f7 01       	movw	r30, r14
    1802:	e2 0f       	add	r30, r18
    1804:	f1 1d       	adc	r31, r1
    1806:	10 82       	st	Z, r1
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	29 96       	adiw	r28, 0x09	; 9
    180e:	ec e0       	ldi	r30, 0x0C	; 12
    1810:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__epilogue_restores__+0xc>

00001814 <__ftoa_engine>:
    1814:	28 30       	cpi	r18, 0x08	; 8
    1816:	08 f0       	brcs	.+2      	; 0x181a <__ftoa_engine+0x6>
    1818:	27 e0       	ldi	r18, 0x07	; 7
    181a:	33 27       	eor	r19, r19
    181c:	da 01       	movw	r26, r20
    181e:	99 0f       	add	r25, r25
    1820:	31 1d       	adc	r19, r1
    1822:	87 fd       	sbrc	r24, 7
    1824:	91 60       	ori	r25, 0x01	; 1
    1826:	00 96       	adiw	r24, 0x00	; 0
    1828:	61 05       	cpc	r22, r1
    182a:	71 05       	cpc	r23, r1
    182c:	39 f4       	brne	.+14     	; 0x183c <__ftoa_engine+0x28>
    182e:	32 60       	ori	r19, 0x02	; 2
    1830:	2e 5f       	subi	r18, 0xFE	; 254
    1832:	3d 93       	st	X+, r19
    1834:	30 e3       	ldi	r19, 0x30	; 48
    1836:	2a 95       	dec	r18
    1838:	e1 f7       	brne	.-8      	; 0x1832 <__ftoa_engine+0x1e>
    183a:	08 95       	ret
    183c:	9f 3f       	cpi	r25, 0xFF	; 255
    183e:	30 f0       	brcs	.+12     	; 0x184c <__ftoa_engine+0x38>
    1840:	80 38       	cpi	r24, 0x80	; 128
    1842:	71 05       	cpc	r23, r1
    1844:	61 05       	cpc	r22, r1
    1846:	09 f0       	breq	.+2      	; 0x184a <__ftoa_engine+0x36>
    1848:	3c 5f       	subi	r19, 0xFC	; 252
    184a:	3c 5f       	subi	r19, 0xFC	; 252
    184c:	3d 93       	st	X+, r19
    184e:	91 30       	cpi	r25, 0x01	; 1
    1850:	08 f0       	brcs	.+2      	; 0x1854 <__ftoa_engine+0x40>
    1852:	80 68       	ori	r24, 0x80	; 128
    1854:	91 1d       	adc	r25, r1
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	1f 93       	push	r17
    185c:	0f 93       	push	r16
    185e:	ff 92       	push	r15
    1860:	ef 92       	push	r14
    1862:	19 2f       	mov	r17, r25
    1864:	98 7f       	andi	r25, 0xF8	; 248
    1866:	96 95       	lsr	r25
    1868:	e9 2f       	mov	r30, r25
    186a:	96 95       	lsr	r25
    186c:	96 95       	lsr	r25
    186e:	e9 0f       	add	r30, r25
    1870:	ff 27       	eor	r31, r31
    1872:	e4 5c       	subi	r30, 0xC4	; 196
    1874:	fe 4f       	sbci	r31, 0xFE	; 254
    1876:	99 27       	eor	r25, r25
    1878:	33 27       	eor	r19, r19
    187a:	ee 24       	eor	r14, r14
    187c:	ff 24       	eor	r15, r15
    187e:	a7 01       	movw	r20, r14
    1880:	e7 01       	movw	r28, r14
    1882:	05 90       	lpm	r0, Z+
    1884:	08 94       	sec
    1886:	07 94       	ror	r0
    1888:	28 f4       	brcc	.+10     	; 0x1894 <__ftoa_engine+0x80>
    188a:	36 0f       	add	r19, r22
    188c:	e7 1e       	adc	r14, r23
    188e:	f8 1e       	adc	r15, r24
    1890:	49 1f       	adc	r20, r25
    1892:	51 1d       	adc	r21, r1
    1894:	66 0f       	add	r22, r22
    1896:	77 1f       	adc	r23, r23
    1898:	88 1f       	adc	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	06 94       	lsr	r0
    189e:	a1 f7       	brne	.-24     	; 0x1888 <__ftoa_engine+0x74>
    18a0:	05 90       	lpm	r0, Z+
    18a2:	07 94       	ror	r0
    18a4:	28 f4       	brcc	.+10     	; 0x18b0 <__ftoa_engine+0x9c>
    18a6:	e7 0e       	add	r14, r23
    18a8:	f8 1e       	adc	r15, r24
    18aa:	49 1f       	adc	r20, r25
    18ac:	56 1f       	adc	r21, r22
    18ae:	c1 1d       	adc	r28, r1
    18b0:	77 0f       	add	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	66 1f       	adc	r22, r22
    18b8:	06 94       	lsr	r0
    18ba:	a1 f7       	brne	.-24     	; 0x18a4 <__ftoa_engine+0x90>
    18bc:	05 90       	lpm	r0, Z+
    18be:	07 94       	ror	r0
    18c0:	28 f4       	brcc	.+10     	; 0x18cc <__ftoa_engine+0xb8>
    18c2:	f8 0e       	add	r15, r24
    18c4:	49 1f       	adc	r20, r25
    18c6:	56 1f       	adc	r21, r22
    18c8:	c7 1f       	adc	r28, r23
    18ca:	d1 1d       	adc	r29, r1
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	06 94       	lsr	r0
    18d6:	a1 f7       	brne	.-24     	; 0x18c0 <__ftoa_engine+0xac>
    18d8:	05 90       	lpm	r0, Z+
    18da:	07 94       	ror	r0
    18dc:	20 f4       	brcc	.+8      	; 0x18e6 <__ftoa_engine+0xd2>
    18de:	49 0f       	add	r20, r25
    18e0:	56 1f       	adc	r21, r22
    18e2:	c7 1f       	adc	r28, r23
    18e4:	d8 1f       	adc	r29, r24
    18e6:	99 0f       	add	r25, r25
    18e8:	66 1f       	adc	r22, r22
    18ea:	77 1f       	adc	r23, r23
    18ec:	88 1f       	adc	r24, r24
    18ee:	06 94       	lsr	r0
    18f0:	a9 f7       	brne	.-22     	; 0x18dc <__ftoa_engine+0xc8>
    18f2:	84 91       	lpm	r24, Z
    18f4:	10 95       	com	r17
    18f6:	17 70       	andi	r17, 0x07	; 7
    18f8:	41 f0       	breq	.+16     	; 0x190a <__ftoa_engine+0xf6>
    18fa:	d6 95       	lsr	r29
    18fc:	c7 95       	ror	r28
    18fe:	57 95       	ror	r21
    1900:	47 95       	ror	r20
    1902:	f7 94       	ror	r15
    1904:	e7 94       	ror	r14
    1906:	1a 95       	dec	r17
    1908:	c1 f7       	brne	.-16     	; 0x18fa <__ftoa_engine+0xe6>
    190a:	e2 ee       	ldi	r30, 0xE2	; 226
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	68 94       	set
    1910:	15 90       	lpm	r1, Z+
    1912:	15 91       	lpm	r17, Z+
    1914:	35 91       	lpm	r19, Z+
    1916:	65 91       	lpm	r22, Z+
    1918:	95 91       	lpm	r25, Z+
    191a:	05 90       	lpm	r0, Z+
    191c:	7f e2       	ldi	r23, 0x2F	; 47
    191e:	73 95       	inc	r23
    1920:	e1 18       	sub	r14, r1
    1922:	f1 0a       	sbc	r15, r17
    1924:	43 0b       	sbc	r20, r19
    1926:	56 0b       	sbc	r21, r22
    1928:	c9 0b       	sbc	r28, r25
    192a:	d0 09       	sbc	r29, r0
    192c:	c0 f7       	brcc	.-16     	; 0x191e <__ftoa_engine+0x10a>
    192e:	e1 0c       	add	r14, r1
    1930:	f1 1e       	adc	r15, r17
    1932:	43 1f       	adc	r20, r19
    1934:	56 1f       	adc	r21, r22
    1936:	c9 1f       	adc	r28, r25
    1938:	d0 1d       	adc	r29, r0
    193a:	7e f4       	brtc	.+30     	; 0x195a <__ftoa_engine+0x146>
    193c:	70 33       	cpi	r23, 0x30	; 48
    193e:	11 f4       	brne	.+4      	; 0x1944 <__ftoa_engine+0x130>
    1940:	8a 95       	dec	r24
    1942:	e6 cf       	rjmp	.-52     	; 0x1910 <__ftoa_engine+0xfc>
    1944:	e8 94       	clt
    1946:	01 50       	subi	r16, 0x01	; 1
    1948:	30 f0       	brcs	.+12     	; 0x1956 <__ftoa_engine+0x142>
    194a:	08 0f       	add	r16, r24
    194c:	0a f4       	brpl	.+2      	; 0x1950 <__ftoa_engine+0x13c>
    194e:	00 27       	eor	r16, r16
    1950:	02 17       	cp	r16, r18
    1952:	08 f4       	brcc	.+2      	; 0x1956 <__ftoa_engine+0x142>
    1954:	20 2f       	mov	r18, r16
    1956:	23 95       	inc	r18
    1958:	02 2f       	mov	r16, r18
    195a:	7a 33       	cpi	r23, 0x3A	; 58
    195c:	28 f0       	brcs	.+10     	; 0x1968 <__ftoa_engine+0x154>
    195e:	79 e3       	ldi	r23, 0x39	; 57
    1960:	7d 93       	st	X+, r23
    1962:	2a 95       	dec	r18
    1964:	e9 f7       	brne	.-6      	; 0x1960 <__ftoa_engine+0x14c>
    1966:	10 c0       	rjmp	.+32     	; 0x1988 <__ftoa_engine+0x174>
    1968:	7d 93       	st	X+, r23
    196a:	2a 95       	dec	r18
    196c:	89 f6       	brne	.-94     	; 0x1910 <__ftoa_engine+0xfc>
    196e:	06 94       	lsr	r0
    1970:	97 95       	ror	r25
    1972:	67 95       	ror	r22
    1974:	37 95       	ror	r19
    1976:	17 95       	ror	r17
    1978:	17 94       	ror	r1
    197a:	e1 18       	sub	r14, r1
    197c:	f1 0a       	sbc	r15, r17
    197e:	43 0b       	sbc	r20, r19
    1980:	56 0b       	sbc	r21, r22
    1982:	c9 0b       	sbc	r28, r25
    1984:	d0 09       	sbc	r29, r0
    1986:	98 f0       	brcs	.+38     	; 0x19ae <__ftoa_engine+0x19a>
    1988:	23 95       	inc	r18
    198a:	7e 91       	ld	r23, -X
    198c:	73 95       	inc	r23
    198e:	7a 33       	cpi	r23, 0x3A	; 58
    1990:	08 f0       	brcs	.+2      	; 0x1994 <__ftoa_engine+0x180>
    1992:	70 e3       	ldi	r23, 0x30	; 48
    1994:	7c 93       	st	X, r23
    1996:	20 13       	cpse	r18, r16
    1998:	b8 f7       	brcc	.-18     	; 0x1988 <__ftoa_engine+0x174>
    199a:	7e 91       	ld	r23, -X
    199c:	70 61       	ori	r23, 0x10	; 16
    199e:	7d 93       	st	X+, r23
    19a0:	30 f0       	brcs	.+12     	; 0x19ae <__ftoa_engine+0x19a>
    19a2:	83 95       	inc	r24
    19a4:	71 e3       	ldi	r23, 0x31	; 49
    19a6:	7d 93       	st	X+, r23
    19a8:	70 e3       	ldi	r23, 0x30	; 48
    19aa:	2a 95       	dec	r18
    19ac:	e1 f7       	brne	.-8      	; 0x19a6 <__ftoa_engine+0x192>
    19ae:	11 24       	eor	r1, r1
    19b0:	ef 90       	pop	r14
    19b2:	ff 90       	pop	r15
    19b4:	0f 91       	pop	r16
    19b6:	1f 91       	pop	r17
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	99 27       	eor	r25, r25
    19be:	87 fd       	sbrc	r24, 7
    19c0:	90 95       	com	r25
    19c2:	08 95       	ret

000019c4 <strnlen_P>:
    19c4:	fc 01       	movw	r30, r24
    19c6:	05 90       	lpm	r0, Z+
    19c8:	61 50       	subi	r22, 0x01	; 1
    19ca:	70 40       	sbci	r23, 0x00	; 0
    19cc:	01 10       	cpse	r0, r1
    19ce:	d8 f7       	brcc	.-10     	; 0x19c6 <strnlen_P+0x2>
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	8e 0f       	add	r24, r30
    19d6:	9f 1f       	adc	r25, r31
    19d8:	08 95       	ret

000019da <strnlen>:
    19da:	fc 01       	movw	r30, r24
    19dc:	61 50       	subi	r22, 0x01	; 1
    19de:	70 40       	sbci	r23, 0x00	; 0
    19e0:	01 90       	ld	r0, Z+
    19e2:	01 10       	cpse	r0, r1
    19e4:	d8 f7       	brcc	.-10     	; 0x19dc <strnlen+0x2>
    19e6:	80 95       	com	r24
    19e8:	90 95       	com	r25
    19ea:	8e 0f       	add	r24, r30
    19ec:	9f 1f       	adc	r25, r31
    19ee:	08 95       	ret

000019f0 <fputc>:
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	fb 01       	movw	r30, r22
    19fa:	23 81       	ldd	r18, Z+3	; 0x03
    19fc:	21 fd       	sbrc	r18, 1
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <fputc+0x16>
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	9f ef       	ldi	r25, 0xFF	; 255
    1a04:	2c c0       	rjmp	.+88     	; 0x1a5e <fputc+0x6e>
    1a06:	22 ff       	sbrs	r18, 2
    1a08:	16 c0       	rjmp	.+44     	; 0x1a36 <fputc+0x46>
    1a0a:	46 81       	ldd	r20, Z+6	; 0x06
    1a0c:	57 81       	ldd	r21, Z+7	; 0x07
    1a0e:	24 81       	ldd	r18, Z+4	; 0x04
    1a10:	35 81       	ldd	r19, Z+5	; 0x05
    1a12:	42 17       	cp	r20, r18
    1a14:	53 07       	cpc	r21, r19
    1a16:	44 f4       	brge	.+16     	; 0x1a28 <fputc+0x38>
    1a18:	a0 81       	ld	r26, Z
    1a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a1c:	9d 01       	movw	r18, r26
    1a1e:	2f 5f       	subi	r18, 0xFF	; 255
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	31 83       	std	Z+1, r19	; 0x01
    1a24:	20 83       	st	Z, r18
    1a26:	8c 93       	st	X, r24
    1a28:	26 81       	ldd	r18, Z+6	; 0x06
    1a2a:	37 81       	ldd	r19, Z+7	; 0x07
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	37 83       	std	Z+7, r19	; 0x07
    1a32:	26 83       	std	Z+6, r18	; 0x06
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <fputc+0x6e>
    1a36:	8b 01       	movw	r16, r22
    1a38:	ec 01       	movw	r28, r24
    1a3a:	fb 01       	movw	r30, r22
    1a3c:	00 84       	ldd	r0, Z+8	; 0x08
    1a3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a40:	e0 2d       	mov	r30, r0
    1a42:	09 95       	icall
    1a44:	89 2b       	or	r24, r25
    1a46:	e1 f6       	brne	.-72     	; 0x1a00 <fputc+0x10>
    1a48:	d8 01       	movw	r26, r16
    1a4a:	16 96       	adiw	r26, 0x06	; 6
    1a4c:	8d 91       	ld	r24, X+
    1a4e:	9c 91       	ld	r25, X
    1a50:	17 97       	sbiw	r26, 0x07	; 7
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	17 96       	adiw	r26, 0x07	; 7
    1a56:	9c 93       	st	X, r25
    1a58:	8e 93       	st	-X, r24
    1a5a:	16 97       	sbiw	r26, 0x06	; 6
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <__ultoa_invert>:
    1a68:	fa 01       	movw	r30, r20
    1a6a:	aa 27       	eor	r26, r26
    1a6c:	28 30       	cpi	r18, 0x08	; 8
    1a6e:	51 f1       	breq	.+84     	; 0x1ac4 <__ultoa_invert+0x5c>
    1a70:	20 31       	cpi	r18, 0x10	; 16
    1a72:	81 f1       	breq	.+96     	; 0x1ad4 <__ultoa_invert+0x6c>
    1a74:	e8 94       	clt
    1a76:	6f 93       	push	r22
    1a78:	6e 7f       	andi	r22, 0xFE	; 254
    1a7a:	6e 5f       	subi	r22, 0xFE	; 254
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	af 4f       	sbci	r26, 0xFF	; 255
    1a84:	b1 e0       	ldi	r27, 0x01	; 1
    1a86:	3e d0       	rcall	.+124    	; 0x1b04 <__ultoa_invert+0x9c>
    1a88:	b4 e0       	ldi	r27, 0x04	; 4
    1a8a:	3c d0       	rcall	.+120    	; 0x1b04 <__ultoa_invert+0x9c>
    1a8c:	67 0f       	add	r22, r23
    1a8e:	78 1f       	adc	r23, r24
    1a90:	89 1f       	adc	r24, r25
    1a92:	9a 1f       	adc	r25, r26
    1a94:	a1 1d       	adc	r26, r1
    1a96:	68 0f       	add	r22, r24
    1a98:	79 1f       	adc	r23, r25
    1a9a:	8a 1f       	adc	r24, r26
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	6a 0f       	add	r22, r26
    1aa2:	71 1d       	adc	r23, r1
    1aa4:	81 1d       	adc	r24, r1
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	20 d0       	rcall	.+64     	; 0x1aec <__ultoa_invert+0x84>
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <__ultoa_invert+0x48>
    1aae:	68 94       	set
    1ab0:	3f 91       	pop	r19
    1ab2:	2a e0       	ldi	r18, 0x0A	; 10
    1ab4:	26 9f       	mul	r18, r22
    1ab6:	11 24       	eor	r1, r1
    1ab8:	30 19       	sub	r19, r0
    1aba:	30 5d       	subi	r19, 0xD0	; 208
    1abc:	31 93       	st	Z+, r19
    1abe:	de f6       	brtc	.-74     	; 0x1a76 <__ultoa_invert+0xe>
    1ac0:	cf 01       	movw	r24, r30
    1ac2:	08 95       	ret
    1ac4:	46 2f       	mov	r20, r22
    1ac6:	47 70       	andi	r20, 0x07	; 7
    1ac8:	40 5d       	subi	r20, 0xD0	; 208
    1aca:	41 93       	st	Z+, r20
    1acc:	b3 e0       	ldi	r27, 0x03	; 3
    1ace:	0f d0       	rcall	.+30     	; 0x1aee <__ultoa_invert+0x86>
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__ultoa_invert+0x5c>
    1ad2:	f6 cf       	rjmp	.-20     	; 0x1ac0 <__ultoa_invert+0x58>
    1ad4:	46 2f       	mov	r20, r22
    1ad6:	4f 70       	andi	r20, 0x0F	; 15
    1ad8:	40 5d       	subi	r20, 0xD0	; 208
    1ada:	4a 33       	cpi	r20, 0x3A	; 58
    1adc:	18 f0       	brcs	.+6      	; 0x1ae4 <__ultoa_invert+0x7c>
    1ade:	49 5d       	subi	r20, 0xD9	; 217
    1ae0:	31 fd       	sbrc	r19, 1
    1ae2:	40 52       	subi	r20, 0x20	; 32
    1ae4:	41 93       	st	Z+, r20
    1ae6:	02 d0       	rcall	.+4      	; 0x1aec <__ultoa_invert+0x84>
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <__ultoa_invert+0x6c>
    1aea:	ea cf       	rjmp	.-44     	; 0x1ac0 <__ultoa_invert+0x58>
    1aec:	b4 e0       	ldi	r27, 0x04	; 4
    1aee:	a6 95       	lsr	r26
    1af0:	97 95       	ror	r25
    1af2:	87 95       	ror	r24
    1af4:	77 95       	ror	r23
    1af6:	67 95       	ror	r22
    1af8:	ba 95       	dec	r27
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__ultoa_invert+0x86>
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	61 05       	cpc	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	08 95       	ret
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	0a 2e       	mov	r0, r26
    1b0a:	06 94       	lsr	r0
    1b0c:	57 95       	ror	r21
    1b0e:	47 95       	ror	r20
    1b10:	37 95       	ror	r19
    1b12:	27 95       	ror	r18
    1b14:	ba 95       	dec	r27
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__ultoa_invert+0xa2>
    1b18:	62 0f       	add	r22, r18
    1b1a:	73 1f       	adc	r23, r19
    1b1c:	84 1f       	adc	r24, r20
    1b1e:	95 1f       	adc	r25, r21
    1b20:	a0 1d       	adc	r26, r0
    1b22:	08 95       	ret

00001b24 <__prologue_saves__>:
    1b24:	2f 92       	push	r2
    1b26:	3f 92       	push	r3
    1b28:	4f 92       	push	r4
    1b2a:	5f 92       	push	r5
    1b2c:	6f 92       	push	r6
    1b2e:	7f 92       	push	r7
    1b30:	8f 92       	push	r8
    1b32:	9f 92       	push	r9
    1b34:	af 92       	push	r10
    1b36:	bf 92       	push	r11
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	ca 1b       	sub	r28, r26
    1b4e:	db 0b       	sbc	r29, r27
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	09 94       	ijmp

00001b5c <__epilogue_restores__>:
    1b5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b5e:	39 88       	ldd	r3, Y+17	; 0x11
    1b60:	48 88       	ldd	r4, Y+16	; 0x10
    1b62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b70:	c8 84       	ldd	r12, Y+8	; 0x08
    1b72:	df 80       	ldd	r13, Y+7	; 0x07
    1b74:	ee 80       	ldd	r14, Y+6	; 0x06
    1b76:	fd 80       	ldd	r15, Y+5	; 0x05
    1b78:	0c 81       	ldd	r16, Y+4	; 0x04
    1b7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1b80:	ce 0f       	add	r28, r30
    1b82:	d1 1d       	adc	r29, r1
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	ed 01       	movw	r28, r26
    1b90:	08 95       	ret

00001b92 <_exit>:
    1b92:	f8 94       	cli

00001b94 <__stop_program>:
    1b94:	ff cf       	rjmp	.-2      	; 0x1b94 <__stop_program>
