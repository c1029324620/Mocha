
DA2CT3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099f  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:

volatile uint8_t cycle_cnt;		//global variable modified by ISR.

int main(void)
{
	DDRC &= ~(1<<3);	//set PORTC.3 as input
  dc:	3b 98       	cbi	0x07, 3	; 7
	DDRB = 0x0C;	//set PORTB.3 and PORTB.2 as output
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	84 b9       	out	0x04, r24	; 4
	PORTC |= (1<<3);	//active pull-up resistor for pushbutton
  e2:	43 9a       	sbi	0x08, 3	; 8
	PORTB |= (1<<2) | (1 << 3);	//pull-up resistor for LED and PORTB.3
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8c 60       	ori	r24, 0x0C	; 12
  e8:	85 b9       	out	0x05, r24	; 5
	TCNT0 = 0x00;
  ea:	16 bc       	out	0x26, r1	; 38
	TCCR0A = (1<<WGM01);		//CTC mode operation
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x05;		//prescaler of 1024
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	95 bd       	out	0x25, r25	; 37
	OCR0A = 0x80;		//overflow happens when TCNT exceed 0x80 or 128
  f4:	90 e8       	ldi	r25, 0x80	; 128
  f6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);	//enable timer0 compare interrupt
  f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	sei();
  fc:	78 94       	sei
	while (1)
	{
		if(!(PINC & (1<<PINC3)))
		{
			cycle_cnt = 0;
			PORTB = 0x08;
  fe:	98 e0       	ldi	r25, 0x08	; 8
	TIMSK0 = (1<<OCIE0A);	//enable timer0 compare interrupt
	sei();
	/* Replace with your application code */
	while (1)
	{
		if(!(PINC & (1<<PINC3)))
 100:	33 99       	sbic	0x06, 3	; 6
 102:	0a c0       	rjmp	.+20     	; 0x118 <main+0x3c>
		{
			cycle_cnt = 0;
 104:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = 0x08;
 108:	95 b9       	out	0x05, r25	; 5
			while(cycle_cnt < 245);
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	85 3f       	cpi	r24, 0xF5	; 245
 110:	e0 f3       	brcs	.-8      	; 0x10a <main+0x2e>
			PORTB |=(1<<2);
 112:	2a 9a       	sbi	0x05, 2	; 5
			cycle_cnt = 0;
 114:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		if((cycle_cnt < 90) && (cycle_cnt >= 40))
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	8a 35       	cpi	r24, 0x5A	; 90
 11e:	28 f4       	brcc	.+10     	; 0x12a <main+0x4e>
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	88 32       	cpi	r24, 0x28	; 40
 126:	08 f0       	brcs	.+2      	; 0x12a <main+0x4e>
		{
			PORTB |= (1 << 3);  //set PORTB.3 HIGH
 128:	2b 9a       	sbi	0x05, 3	; 5
		}
		if(cycle_cnt > 90)
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12e:	8b 35       	cpi	r24, 0x5B	; 91
 130:	38 f3       	brcs	.-50     	; 0x100 <main+0x24>
		{
			PORTB &= ~(1<<3);
 132:	2b 98       	cbi	0x05, 3	; 5
			cycle_cnt = 0;		//set PORTB.3 LOW
 134:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 138:	e3 cf       	rjmp	.-58     	; 0x100 <main+0x24>

0000013a <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
	cycle_cnt++;
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
