
DA2CT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099f  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:

volatile uint8_t cycle_cnt;		//global variable modified by ISR.

int main(void)
{
	DDRC &= ~(1<<3);	//set PORTC.3 as input
  dc:	3b 98       	cbi	0x07, 3	; 7
	DDRB = 0x0C;	//set PORTB.3 and PORTB.2 as output
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	84 b9       	out	0x04, r24	; 4
	PORTC |= (1<<3);	//active pull-up resistor for pushbutton
  e2:	43 9a       	sbi	0x08, 3	; 8
	PORTB |= (1<<2) | (1 << 3);	//pull-up resistor for LED and PORTB.3
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8c 60       	ori	r24, 0x0C	; 12
  e8:	85 b9       	out	0x05, r24	; 5
	TCNT0 = 0x00;
  ea:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;		//normal mode operation
  ec:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;		//prescaler of 1024
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);	//enable timer0 overflow interrupt
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	sei();
  f8:	78 94       	sei
    while (1) 
    {
		if(!(PINC & (1<<PINC3)))
		{
			cycle_cnt = 0;
			PORTB = 0x08;
  fa:	98 e0       	ldi	r25, 0x08	; 8
	TIMSK0 = (1<<TOIE0);	//enable timer0 overflow interrupt
	sei();
    /* Replace with your application code */
    while (1) 
    {
		if(!(PINC & (1<<PINC3)))
  fc:	33 99       	sbic	0x06, 3	; 6
  fe:	0a c0       	rjmp	.+20     	; 0x114 <main+0x38>
		{
			cycle_cnt = 0;
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = 0x08;
 104:	95 b9       	out	0x05, r25	; 5
			while(cycle_cnt < 123);
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10a:	8b 37       	cpi	r24, 0x7B	; 123
 10c:	e0 f3       	brcs	.-8      	; 0x106 <main+0x2a>
			PORTB |=(1<<2);
 10e:	2a 9a       	sbi	0x05, 2	; 5
			cycle_cnt = 0;
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		if((cycle_cnt < 45) && (cycle_cnt >= 20))
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 118:	8d 32       	cpi	r24, 0x2D	; 45
 11a:	28 f4       	brcc	.+10     	; 0x126 <main+0x4a>
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	84 31       	cpi	r24, 0x14	; 20
 122:	08 f0       	brcs	.+2      	; 0x126 <main+0x4a>
		{
			PORTB |= (1 << 3);  //set PORTB.3 HIGH
 124:	2b 9a       	sbi	0x05, 3	; 5
		}
		if(cycle_cnt > 45)
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12a:	8e 32       	cpi	r24, 0x2E	; 46
 12c:	38 f3       	brcs	.-50     	; 0xfc <main+0x20>
		{
			PORTB &= ~(1<<3);
 12e:	2b 98       	cbi	0x05, 3	; 5
			cycle_cnt = 0;		//set PORTB.3 LOW
 130:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 134:	e3 cf       	rjmp	.-58     	; 0xfc <main+0x20>

00000136 <__vector_16>:
		}
    }
}

ISR(TIMER0_OVF_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	cycle_cnt++;
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
