
DA2CT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a12  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090e  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e2  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  c4:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <on_2sec>:
 */ 
#define F_CPU 16000000UL		//1/16M = 62.5ns for one clock
#include <avr/io.h>

void on_2sec()
{
  cc:	8a e7       	ldi	r24, 0x7A	; 122
  ce:	90 e0       	ldi	r25, 0x00	; 0
	int cycle = 122;				//2sec/62.5ns/1024/255 = 122 cycles
	while(cycle != 0)
	{
		cycle--;
		while((TIFR0 & 0x01) == 0);  //if overflow is set, clear it with reset to 1.
		TIFR0 = 1<<TOV0;
  d0:	21 e0       	ldi	r18, 0x01	; 1
{
	int cycle = 122;				//2sec/62.5ns/1024/255 = 122 cycles
	while(cycle != 0)
	{
		cycle--;
		while((TIFR0 & 0x01) == 0);  //if overflow is set, clear it with reset to 1.
  d2:	a8 9b       	sbis	0x15, 0	; 21
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <on_2sec+0x6>
		TIFR0 = 1<<TOV0;
  d6:	25 bb       	out	0x15, r18	; 21
  d8:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/io.h>

void on_2sec()
{
	int cycle = 122;				//2sec/62.5ns/1024/255 = 122 cycles
	while(cycle != 0)
  da:	d9 f7       	brne	.-10     	; 0xd2 <on_2sec+0x6>
		cycle--;
		while((TIFR0 & 0x01) == 0);  //if overflow is set, clear it with reset to 1.
		TIFR0 = 1<<TOV0;
	}
	
}
  dc:	08 95       	ret

000000de <on_412>:

void on_412()
{
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	int cycle = 25;					//412ms/62.5ns/1024 = 6437.5 clocks to overflow
	PORTB |= (1<<3);					//6438/255 = 25 cycles
  e4:	2b 9a       	sbi	0x05, 3	; 5
  e6:	c9 e1       	ldi	r28, 0x19	; 25
  e8:	d0 e0       	ldi	r29, 0x00	; 0
	while(cycle != 0)
	{
		if(!(PINC &(1<< PINC3)))	//if PINC.3 is pressed.
		{
			PORTB = 0x08;		//Turn LED on
  ea:	18 e0       	ldi	r17, 0x08	; 8
{
	int cycle = 25;					//412ms/62.5ns/1024 = 6437.5 clocks to overflow
	PORTB |= (1<<3);					//6438/255 = 25 cycles
	while(cycle != 0)
	{
		if(!(PINC &(1<< PINC3)))	//if PINC.3 is pressed.
  ec:	33 99       	sbic	0x06, 3	; 6
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <on_412+0x1a>
		{
			PORTB = 0x08;		//Turn LED on
  f0:	15 b9       	out	0x05, r17	; 5
			on_2sec();				//delay for 2 second.
  f2:	0e 94 66 00 	call	0xcc	; 0xcc <on_2sec>
			PORTB |=(1<<2);			//Turn LED off.
  f6:	2a 9a       	sbi	0x05, 2	; 5
		}
		cycle--;
		while((TIFR0 & 0x01) == 0);	//if overflow is set, clear it with reset to 1.
  f8:	a8 9b       	sbis	0x15, 0	; 21
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <on_412+0x1a>
		TIFR0 |= 1<<TOV0;			
  fc:	a8 9a       	sbi	0x15, 0	; 21
  fe:	21 97       	sbiw	r28, 0x01	; 1

void on_412()
{
	int cycle = 25;					//412ms/62.5ns/1024 = 6437.5 clocks to overflow
	PORTB |= (1<<3);					//6438/255 = 25 cycles
	while(cycle != 0)
 100:	a9 f7       	brne	.-22     	; 0xec <on_412+0xe>
		}
		cycle--;
		while((TIFR0 & 0x01) == 0);	//if overflow is set, clear it with reset to 1.
		TIFR0 |= 1<<TOV0;			
	}
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	08 95       	ret

0000010a <off_338>:

void off_338()
{
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	int cycle = 20;			//338ms/62.5ns/1024 = 5281.25 clocks to overflow
	PORTB &=~(1<<3);			//5281.25/255 = 20 cycles 
 112:	2b 98       	cbi	0x05, 3	; 5
 114:	c4 e1       	ldi	r28, 0x14	; 20
 116:	d0 e0       	ldi	r29, 0x00	; 0
	while(cycle != 0)
	{
		if(!(PINC &(1<< PINC3)))	//if PINC.3 is pressed.
		{
			PORTB = 0x08;		//Turn LED on.
 118:	08 e0       	ldi	r16, 0x08	; 8
			on_2sec();				//delay for 2 second.
			PORTB |=(1<<2);			//Turn LED off.
		}
		cycle--;
		while((TIFR0 & 0x01) == 0);
		TIFR0 = 1<<TOV0;		//clear overflow flag
 11a:	11 e0       	ldi	r17, 0x01	; 1
{
	int cycle = 20;			//338ms/62.5ns/1024 = 5281.25 clocks to overflow
	PORTB &=~(1<<3);			//5281.25/255 = 20 cycles 
	while(cycle != 0)
	{
		if(!(PINC &(1<< PINC3)))	//if PINC.3 is pressed.
 11c:	33 99       	sbic	0x06, 3	; 6
 11e:	04 c0       	rjmp	.+8      	; 0x128 <off_338+0x1e>
		{
			PORTB = 0x08;		//Turn LED on.
 120:	05 b9       	out	0x05, r16	; 5
			on_2sec();				//delay for 2 second.
 122:	0e 94 66 00 	call	0xcc	; 0xcc <on_2sec>
			PORTB |=(1<<2);			//Turn LED off.
 126:	2a 9a       	sbi	0x05, 2	; 5
		}
		cycle--;
		while((TIFR0 & 0x01) == 0);
 128:	a8 9b       	sbis	0x15, 0	; 21
 12a:	fe cf       	rjmp	.-4      	; 0x128 <off_338+0x1e>
		TIFR0 = 1<<TOV0;		//clear overflow flag
 12c:	15 bb       	out	0x15, r17	; 21
 12e:	21 97       	sbiw	r28, 0x01	; 1

void off_338()
{
	int cycle = 20;			//338ms/62.5ns/1024 = 5281.25 clocks to overflow
	PORTB &=~(1<<3);			//5281.25/255 = 20 cycles 
	while(cycle != 0)
 130:	a9 f7       	brne	.-22     	; 0x11c <off_338+0x12>
		}
		cycle--;
		while((TIFR0 & 0x01) == 0);
		TIFR0 = 1<<TOV0;		//clear overflow flag
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <main>:

int main(void)
{
	DDRC &= ~(1<<3);	//set PORTC.3 as input
 13c:	3b 98       	cbi	0x07, 3	; 7
	DDRB = 0x0C;	//set PORTB.3 and PORTB.2 as output
 13e:	8c e0       	ldi	r24, 0x0C	; 12
 140:	84 b9       	out	0x04, r24	; 4
	PORTC |= (1<<3); //active pull-up resistor for pushbutton
 142:	43 9a       	sbi	0x08, 3	; 8
	PORTB |= (1<<2);	//pull-up resistor for LED
 144:	2a 9a       	sbi	0x05, 2	; 5
	
    /* Replace with your application code */
    while (1) 
    {
		TCCR0A = 0x00;		//normal mode operation
		TCCR0B = 0x05;		//prescaler of 1024
 146:	c5 e0       	ldi	r28, 0x05	; 5
	
	
    /* Replace with your application code */
    while (1) 
    {
		TCCR0A = 0x00;		//normal mode operation
 148:	14 bc       	out	0x24, r1	; 36
		TCCR0B = 0x05;		//prescaler of 1024
 14a:	c5 bd       	out	0x25, r28	; 37
		TCNT0 = 0X00;
 14c:	16 bc       	out	0x26, r1	; 38
		on_412();			//hold PORTB.3 HIGH for 412ms
 14e:	0e 94 6f 00 	call	0xde	; 0xde <on_412>
		off_338();			//hold PORTB.3 LOW for 338ms
 152:	0e 94 85 00 	call	0x10a	; 0x10a <off_338>
 156:	f8 cf       	rjmp	.-16     	; 0x148 <main+0xc>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
