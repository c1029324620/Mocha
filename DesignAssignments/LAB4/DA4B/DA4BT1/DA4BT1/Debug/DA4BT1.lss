
DA4BT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2d  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091f  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036e  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000015  00000000  00000000  00001df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 91 00 	call	0x122	; 0x122 <main>
  d4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adc_int>:

unsigned int adc_value;

void adc_int()
{
		ADMUX = (0<<REFS1) |	//AVref
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		(1<<REFS0) |
		(1<<ADLAR) |	//Left justified
		(0<<MUX2)  |	//ADC0 channel 0
		(0<<MUX1)  |
		(0<<MUX0);
		ADCSRA = (1<<ADEN) |	//Enable ADC
  e2:	87 e8       	ldi	r24, 0x87	; 135
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <adc_read>:
		(1<<ADPS0);
}

void adc_read()
{
		ADCSRA |= (1 << ADSC);		//enable start conversion
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
		while(ADCSRA & (1<< ADSC));	//wait
  f4:	80 81       	ld	r24, Z
  f6:	86 fd       	sbrc	r24, 6
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <adc_read+0xa>
		adc_value = ADCH;	// potentiometer value stored in adc_value
  fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 108:	08 95       	ret

0000010a <my_delay>:


//control delay by timer0 in CTC mode
void my_delay()
{
	OCR0A = adc_value;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	87 bd       	out	0x27, r24	; 39
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
	int cycle = 100;
	while(cycle != 0)
	{
		cycle--;
		while((TIFR0 & 0x02) == 0);
		TIFR0 = 1<<OCIE0A;
 114:	22 e0       	ldi	r18, 0x02	; 2
	OCR0A = adc_value;
	int cycle = 100;
	while(cycle != 0)
	{
		cycle--;
		while((TIFR0 & 0x02) == 0);
 116:	a9 9b       	sbis	0x15, 1	; 21
 118:	fe cf       	rjmp	.-4      	; 0x116 <my_delay+0xc>
		TIFR0 = 1<<OCIE0A;
 11a:	25 bb       	out	0x15, r18	; 21
 11c:	01 97       	sbiw	r24, 0x01	; 1
//control delay by timer0 in CTC mode
void my_delay()
{
	OCR0A = adc_value;
	int cycle = 100;
	while(cycle != 0)
 11e:	d9 f7       	brne	.-10     	; 0x116 <my_delay+0xc>
	{
		cycle--;
		while((TIFR0 & 0x02) == 0);
		TIFR0 = 1<<OCIE0A;
	}
}
 120:	08 95       	ret

00000122 <main>:

int main(void)
{
    /* Replace with your application code */	adc_int();
 122:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_int>
	TCCR0A |= (1<<WGM01); //CTC mode
 126:	84 b5       	in	r24, 0x24	; 36
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<< WGM02)|(1<<CS02) |(1<<CS00);	//prescaler of 1024
 12c:	85 b5       	in	r24, 0x25	; 37
 12e:	85 60       	ori	r24, 0x05	; 5
 130:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;
 132:	16 bc       	out	0x26, r1	; 38
	PORTC |=  (1<<0);	   //Pull Up Resistor Activated PC0
 134:	40 9a       	sbi	0x08, 0	; 8
	DDRD = 0xF0;           //make PORTD upper pins as output
 136:	80 ef       	ldi	r24, 0xF0	; 240
 138:	8a b9       	out	0x0a, r24	; 10
    while (1) 
    {
		//counter-clockwise and full step
		PORTD=0x90;
 13a:	00 e9       	ldi	r16, 0x90	; 144
		adc_read();			//read potentiometer value
		my_delay();			//set the potentiometer value as OCRA value
		PORTD=0x30;
 13c:	10 e3       	ldi	r17, 0x30	; 48
		adc_read();
		my_delay();
		PORTD=0x60;
 13e:	d0 e6       	ldi	r29, 0x60	; 96
		adc_read();
		my_delay();
		PORTD=0xC0;
 140:	c0 ec       	ldi	r28, 0xC0	; 192
	PORTC |=  (1<<0);	   //Pull Up Resistor Activated PC0
	DDRD = 0xF0;           //make PORTD upper pins as output
    while (1) 
    {
		//counter-clockwise and full step
		PORTD=0x90;
 142:	0b b9       	out	0x0b, r16	; 11
		adc_read();			//read potentiometer value
 144:	0e 94 75 00 	call	0xea	; 0xea <adc_read>
		my_delay();			//set the potentiometer value as OCRA value
 148:	0e 94 85 00 	call	0x10a	; 0x10a <my_delay>
		PORTD=0x30;
 14c:	1b b9       	out	0x0b, r17	; 11
		adc_read();
 14e:	0e 94 75 00 	call	0xea	; 0xea <adc_read>
		my_delay();
 152:	0e 94 85 00 	call	0x10a	; 0x10a <my_delay>
		PORTD=0x60;
 156:	db b9       	out	0x0b, r29	; 11
		adc_read();
 158:	0e 94 75 00 	call	0xea	; 0xea <adc_read>
		my_delay();
 15c:	0e 94 85 00 	call	0x10a	; 0x10a <my_delay>
		PORTD=0xC0;
 160:	cb b9       	out	0x0b, r28	; 11
		adc_read();
 162:	0e 94 75 00 	call	0xea	; 0xea <adc_read>
		my_delay();
 166:	0e 94 85 00 	call	0x10a	; 0x10a <my_delay>
 16a:	eb cf       	rjmp	.-42     	; 0x142 <main+0x20>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
