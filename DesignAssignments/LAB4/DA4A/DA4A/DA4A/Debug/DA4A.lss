
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abc  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000978  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d9  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  d4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <read_adc>:
unsigned int adc_value;
int enable = 0;

void read_adc()
{
	ADCSRA |= (1 << ADSC);		//enable start conversion
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	while(ADCSRA & (1<< ADSC));	//wait
  e6:	80 81       	ld	r24, Z
  e8:	86 fd       	sbrc	r24, 6
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <read_adc+0xa>
	adc_value = ADC;	// potentiometer value stored in adc_value
  ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  fc:	08 95       	ret

000000fe <init_adc>:
}

void init_adc()
{
	ADMUX = (0<<REFS1) |	//AVref
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
			(1<<REFS0) |	
			(1<<ADLAR) |	//Left justified
			(0<<MUX2)  |	//ADC0 channel 0
			(0<<MUX1)  |
			(0<<MUX0);
	ADCSRA = (1<<ADEN) |	//Enable ADC
 104:	87 e8       	ldi	r24, 0x87	; 135
 106:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 10a:	08 95       	ret

0000010c <main>:


int main(void)
{
    /* Replace with your application code */
	init_adc();
 10c:	0e 94 7f 00 	call	0xfe	; 0xfe <init_adc>
	
	DDRC |= (0<<DDRC1);	//pinc.1 as input
 110:	87 b1       	in	r24, 0x07	; 7
 112:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << 1); //pull=up resistor
 114:	41 9a       	sbi	0x08, 1	; 8
	PCICR |= (1<<PCIE1); //pin change interrupt
 116:	e8 e6       	ldi	r30, 0x68	; 104
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT9); 
 120:	ec e6       	ldi	r30, 0x6C	; 108
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
	sei();
 12a:	78 94       	sei
	 
	DDRB |= (1<< DDRB1);	//Port B.1 as output
 12c:	21 9a       	sbi	0x04, 1	; 4
	ICR1 = 0xffff;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	9f ef       	ldi	r25, 0xFF	; 255
 132:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 136:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);		//non-inverting 
 13a:	82 ea       	ldi	r24, 0xA2	; 162
 13c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    TCCR1B = (1<< WGM12) | (1<<WGM13);	//Fast PWM using ICR1 as TOP
 140:	e1 e8       	ldi	r30, 0x81	; 129
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	88 e1       	ldi	r24, 0x18	; 24
 146:	80 83       	st	Z, r24
	TCCR1B = (1<< CS10);	// no prescaler.
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
		{
			OCR1A = adc_value;
			_delay_ms(20);
		}
		else
		OCR1A = 0x00;		//minimum speed at less than 5% of PWM value.
 14c:	c8 e8       	ldi	r28, 0x88	; 136
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		read_adc();
		if((adc_value >= 62258) && (adc_value < 65535))	//95% of PWM value
		{
			OCR1A = 62258;
 150:	02 e3       	ldi	r16, 0x32	; 50
 152:	13 ef       	ldi	r17, 0xF3	; 243
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);		//non-inverting 
    TCCR1B = (1<< WGM12) | (1<<WGM13);	//Fast PWM using ICR1 as TOP
	TCCR1B = (1<< CS10);	// no prescaler.
	while(1)
	{
		read_adc();
 154:	0e 94 6e 00 	call	0xdc	; 0xdc <read_adc>
		if((adc_value >= 62258) && (adc_value < 65535))	//95% of PWM value
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 160:	9c 01       	movw	r18, r24
 162:	22 53       	subi	r18, 0x32	; 50
 164:	33 4f       	sbci	r19, 0xF3	; 243
 166:	2d 3c       	cpi	r18, 0xCD	; 205
 168:	3c 40       	sbci	r19, 0x0C	; 12
 16a:	60 f4       	brcc	.+24     	; 0x184 <main+0x78>
		{
			OCR1A = 62258;
 16c:	19 83       	std	Y+1, r17	; 0x01
 16e:	08 83       	st	Y, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	99 ef       	ldi	r25, 0xF9	; 249
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	81 50       	subi	r24, 0x01	; 1
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	20 40       	sbci	r18, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x6a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x74>
 180:	00 00       	nop
 182:	e8 cf       	rjmp	.-48     	; 0x154 <main+0x48>
			_delay_ms(20);
		}
		else if((adc_value < 62257) && (adc_value >= 3277))
 184:	9c 01       	movw	r18, r24
 186:	2d 5c       	subi	r18, 0xCD	; 205
 188:	3c 40       	sbci	r19, 0x0C	; 12
 18a:	24 36       	cpi	r18, 0x64	; 100
 18c:	36 4e       	sbci	r19, 0xE6	; 230
 18e:	60 f4       	brcc	.+24     	; 0x1a8 <main+0x9c>
		{
			OCR1A = adc_value;
 190:	99 83       	std	Y+1, r25	; 0x01
 192:	88 83       	st	Y, r24
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	99 ef       	ldi	r25, 0xF9	; 249
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x8e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x98>
 1a4:	00 00       	nop
 1a6:	d6 cf       	rjmp	.-84     	; 0x154 <main+0x48>
			_delay_ms(20);
		}
		else
		OCR1A = 0x00;		//minimum speed at less than 5% of PWM value.
 1a8:	19 82       	std	Y+1, r1	; 0x01
 1aa:	18 82       	st	Y, r1
 1ac:	d3 cf       	rjmp	.-90     	; 0x154 <main+0x48>

000001ae <__vector_4>:
	}
	return 0;
}

ISR(PCINT1_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
	DDRC ^=(1<<2);
 1bc:	97 b1       	in	r25, 0x07	; 7
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	89 27       	eor	r24, r25
 1c2:	87 b9       	out	0x07, r24	; 7
}
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
