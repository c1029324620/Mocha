
Task 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800126  00800126  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047f  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017f  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e9       	ldi	r30, 0x90	; 144
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 32       	cpi	r26, 0x26	; 38
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 32       	cpi	r26, 0x2E	; 46
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  ea:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <uart_putchar>:
		PORTD &= (0 << CLOCK);
	}
}
void shift_out_latch(void) {
	PORTD &= (0 << LATCH);
	PORTD |= (1 << LATCH);
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	19 f4       	brne	.+6      	; 0x100 <uart_putchar+0xe>
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putchar>
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	85 ff       	sbrs	r24, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <uart_putchar+0x12>
 10a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <uart_getchar>:
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <uart_getchar+0x4>
 120:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret

00000128 <adc_int>:
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 12e:	85 e8       	ldi	r24, 0x85	; 133
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 134:	08 95       	ret

00000136 <adc_read>:
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 83       	st	Z, r24
 140:	80 81       	ld	r24, Z
 142:	86 fd       	sbrc	r24, 6
 144:	fd cf       	rjmp	.-6      	; 0x140 <adc_read+0xa>
 146:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 14a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 14e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 152:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 156:	08 95       	ret

00000158 <shift_out_init>:
 158:	20 9a       	sbi	0x04, 0	; 4
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	80 69       	ori	r24, 0x90	; 144
 15e:	8a b9       	out	0x0a, r24	; 10
 160:	08 95       	ret

00000162 <uart_init>:
 162:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 166:	87 e6       	ldi	r24, 0x67	; 103
 168:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 16c:	e0 ec       	ldi	r30, 0xC0	; 192
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	80 83       	st	Z, r24
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 182:	08 95       	ret

00000184 <shift_out>:
 184:	27 e0       	ldi	r18, 0x07	; 7
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 2e       	mov	r0, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <shift_out+0x10>
 190:	55 95       	asr	r21
 192:	47 95       	ror	r20
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <shift_out+0xc>
 198:	40 fd       	sbrc	r20, 0
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <shift_out+0x1e>
 19c:	45 b1       	in	r20, 0x05	; 5
 19e:	15 b8       	out	0x05, r1	; 5
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <shift_out+0x20>
 1a2:	28 9a       	sbi	0x05, 0	; 5
 1a4:	5f 9a       	sbi	0x0b, 7	; 11
 1a6:	4b b1       	in	r20, 0x0b	; 11
 1a8:	1b b8       	out	0x0b, r1	; 11
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	31 09       	sbc	r19, r1
 1ae:	68 f7       	brcc	.-38     	; 0x18a <shift_out+0x6>
 1b0:	08 95       	ret

000001b2 <main>:
}

int main(void) {

	shift_out_init();
 1b2:	0e 94 ac 00 	call	0x158	; 0x158 <shift_out_init>
	uart_init();
 1b6:	0e 94 b1 00 	call	0x162	; 0x162 <uart_init>
	stdout = &uart_output;
 1ba:	e8 e2       	ldi	r30, 0x28	; 40
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	93 83       	std	Z+3, r25	; 0x03
 1c4:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
	char binary[17];
	adc_int();
 1ce:	0e 94 94 00 	call	0x128	; 0x128 <adc_int>
	
	while (1) {
		adc_read();
 1d2:	0e 94 9b 00 	call	0x136	; 0x136 <adc_read>
		int first_digi = adc_value % 10;		//get the first digit
 1d6:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <__data_end>
 1da:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <__data_end+0x1>
		int second_digi = adc_value / 10;		//get the ten digit
		int third_digi = adc_value / 100;		//get the hundreds digit
		
		PORTD &= (0<< LATCH);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	1b b8       	out	0x0b, r1	; 11
		shift_out(SEGMENT_MAP[third_digi]);
 1e2:	9e 01       	movw	r18, r28
 1e4:	36 95       	lsr	r19
 1e6:	27 95       	ror	r18
 1e8:	36 95       	lsr	r19
 1ea:	27 95       	ror	r18
 1ec:	ab e7       	ldi	r26, 0x7B	; 123
 1ee:	b4 e1       	ldi	r27, 0x14	; 20
 1f0:	0e 94 37 01 	call	0x26e	; 0x26e <__umulhisi3>
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	fc 01       	movw	r30, r24
 1fa:	e4 5e       	subi	r30, 0xE4	; 228
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 c2 00 	call	0x184	; 0x184 <shift_out>
		shift_out(0xF2);
 204:	82 ef       	ldi	r24, 0xF2	; 242
 206:	0e 94 c2 00 	call	0x184	; 0x184 <shift_out>
		PORTD |= (1<< LATCH);
 20a:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD &= (0<< LATCH);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	1b b8       	out	0x0b, r1	; 11
		shift_out(SEGMENT_MAP[second_digi]);
 210:	9e 01       	movw	r18, r28
 212:	ad ec       	ldi	r26, 0xCD	; 205
 214:	bc ec       	ldi	r27, 0xCC	; 204
 216:	0e 94 37 01 	call	0x26e	; 0x26e <__umulhisi3>
 21a:	8c 01       	movw	r16, r24
 21c:	16 95       	lsr	r17
 21e:	07 95       	ror	r16
 220:	16 95       	lsr	r17
 222:	07 95       	ror	r16
 224:	16 95       	lsr	r17
 226:	07 95       	ror	r16
 228:	f8 01       	movw	r30, r16
 22a:	e4 5e       	subi	r30, 0xE4	; 228
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	80 81       	ld	r24, Z
 230:	0e 94 c2 00 	call	0x184	; 0x184 <shift_out>
		shift_out(0xF4);
 234:	84 ef       	ldi	r24, 0xF4	; 244
 236:	0e 94 c2 00 	call	0x184	; 0x184 <shift_out>
		PORTD |= (1<< LATCH);
 23a:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD &= (0<< LATCH);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	1b b8       	out	0x0b, r1	; 11
		shift_out(SEGMENT_MAP[first_digi]);
 240:	c8 01       	movw	r24, r16
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	00 0f       	add	r16, r16
 248:	11 1f       	adc	r17, r17
 24a:	00 0f       	add	r16, r16
 24c:	11 1f       	adc	r17, r17
 24e:	00 0f       	add	r16, r16
 250:	11 1f       	adc	r17, r17
 252:	08 0f       	add	r16, r24
 254:	19 1f       	adc	r17, r25
 256:	c0 1b       	sub	r28, r16
 258:	d1 0b       	sbc	r29, r17
 25a:	c4 5e       	subi	r28, 0xE4	; 228
 25c:	de 4f       	sbci	r29, 0xFE	; 254
 25e:	88 81       	ld	r24, Y
 260:	0e 94 c2 00 	call	0x184	; 0x184 <shift_out>
		shift_out(0xF8);
 264:	88 ef       	ldi	r24, 0xF8	; 248
 266:	0e 94 c2 00 	call	0x184	; 0x184 <shift_out>
		PORTD |= (1<< LATCH);	
 26a:	5c 9a       	sbi	0x0b, 4	; 11
 26c:	b2 cf       	rjmp	.-156    	; 0x1d2 <main+0x20>

0000026e <__umulhisi3>:
 26e:	a2 9f       	mul	r26, r18
 270:	b0 01       	movw	r22, r0
 272:	b3 9f       	mul	r27, r19
 274:	c0 01       	movw	r24, r0
 276:	a3 9f       	mul	r26, r19
 278:	70 0d       	add	r23, r0
 27a:	81 1d       	adc	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	91 1d       	adc	r25, r1
 280:	b2 9f       	mul	r27, r18
 282:	70 0d       	add	r23, r0
 284:	81 1d       	adc	r24, r1
 286:	11 24       	eor	r1, r1
 288:	91 1d       	adc	r25, r1
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
