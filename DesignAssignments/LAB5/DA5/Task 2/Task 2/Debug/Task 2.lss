
Task 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2c  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  0000165f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ee       	ldi	r30, 0xE2	; 226
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 30       	cpi	r26, 0x0B	; 11
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  ea:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_int>:

//initialized adc module
void adc_int(void)
{
	//setup and enable ADC
	ADMUX = (0 << REFS1) | //reference selection bits
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	(1 << REFS0) |	//AVcc-external cap at AREF
	(0 << ADLAR) | //ADC left adjust result
	(1 << MUX2)  |	//analog channel selection bits
	(0 << MUX1)  |	// ADC4(PC4)
	(0 << MUX0);
	ADCSRA = (1 << ADEN) |	// ADC enable
  f8:	85 e8       	ldi	r24, 0x85	; 133
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  fe:	08 95       	ret

00000100 <adc_read>:
}


void adc_read(void)
{
	ADCSRA |= (1 << ADSC);		//enable start conversion
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	while(ADCSRA & (1<< ADSC));	//wait
 10a:	80 81       	ld	r24, Z
 10c:	86 fd       	sbrc	r24, 6
 10e:	fd cf       	rjmp	.-6      	; 0x10a <adc_read+0xa>
	adc_value = ADC;	// LM35 value stored in temp.
 110:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 114:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 118:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 11c:	08 95       	ret

0000011e <main>:
}

int main(void)
{
	adc_int();		//initialize the adc module
 11e:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_int>
	while(1)
	{
			adc_read();
			SHIFT_REGISTER |= (DATA | LATCH | CLOCK); //Set control pins as outputs
			SHIFT_PORT &= ~(DATA | LATCH | CLOCK);        //Set control pins low
			SPCR0 = (1<<SPE) | (1<<MSTR);  //Start SPI as Master
 122:	0f 2e       	mov	r0, r31
 124:	f0 e5       	ldi	r31, 0x50	; 80
 126:	ef 2e       	mov	r14, r31
 128:	f0 2d       	mov	r31, r0
			SHIFT_PORT &= ~LATCH;
			
			//Shift in some data
			SPDR0 = SEGMENT_MAP[adc_value % 10];        //This should light alternating LEDs
 12a:	cd ec       	ldi	r28, 0xCD	; 205
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
			
			//Shift in some more data since I have two shift registers hooked up
			SPDR0 = 0xF8;        //This should light alternating LEDs
 12c:	0f 2e       	mov	r0, r31
 12e:	f8 ef       	ldi	r31, 0xF8	; 248
 130:	ff 2e       	mov	r15, r31
 132:	f0 2d       	mov	r31, r0
			SPDR0 = SEGMENT_MAP[adc_value /10];        //This should light alternating LEDs
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
			
			//Shift in some more data since I have two shift registers hooked up
			SPDR0 = 0xF4;        //This should light alternating LEDs
 134:	04 ef       	ldi	r16, 0xF4	; 244
			
			//Toggle latch to copy data to the storage register
			SHIFT_PORT |= LATCH;
			SHIFT_PORT &= ~LATCH;
			
			SPDR0 = SEGMENT_MAP[adc_value /100];        //This should light alternating LEDs
 136:	19 e2       	ldi	r17, 0x29	; 41
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
			
			//Shift in some more data since I have two shift registers hooked up
			SPDR0 = 0xF2;        //This should light alternating LEDs
 138:	d2 ef       	ldi	r29, 0xF2	; 242
int main(void)
{
	adc_int();		//initialize the adc module
	while(1)
	{
			adc_read();
 13a:	0e 94 80 00 	call	0x100	; 0x100 <adc_read>
			SHIFT_REGISTER |= (DATA | LATCH | CLOCK); //Set control pins as outputs
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8c 62       	ori	r24, 0x2C	; 44
 142:	84 b9       	out	0x04, r24	; 4
			SHIFT_PORT &= ~(DATA | LATCH | CLOCK);        //Set control pins low
 144:	85 b1       	in	r24, 0x05	; 5
 146:	83 7d       	andi	r24, 0xD3	; 211
 148:	85 b9       	out	0x05, r24	; 5
			SPCR0 = (1<<SPE) | (1<<MSTR);  //Start SPI as Master
 14a:	ec bc       	out	0x2c, r14	; 44
			SHIFT_PORT &= ~LATCH;
 14c:	2a 98       	cbi	0x05, 2	; 5
			
			//Shift in some data
			SPDR0 = SEGMENT_MAP[adc_value % 10];        //This should light alternating LEDs
 14e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 152:	ec 9f       	mul	r30, r28
 154:	81 2d       	mov	r24, r1
 156:	11 24       	eor	r1, r1
 158:	86 95       	lsr	r24
 15a:	86 95       	lsr	r24
 15c:	86 95       	lsr	r24
 15e:	88 0f       	add	r24, r24
 160:	98 2f       	mov	r25, r24
 162:	99 0f       	add	r25, r25
 164:	99 0f       	add	r25, r25
 166:	89 0f       	add	r24, r25
 168:	e8 1b       	sub	r30, r24
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
 174:	0d b4       	in	r0, 0x2d	; 45
 176:	07 fe       	sbrs	r0, 7
 178:	fd cf       	rjmp	.-6      	; 0x174 <main+0x56>
			
			//Shift in some more data since I have two shift registers hooked up
			SPDR0 = 0xF8;        //This should light alternating LEDs
 17a:	fe bc       	out	0x2e, r15	; 46
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x5e>
			
			//Toggle latch to copy data to the storage register
			SHIFT_PORT |= LATCH;
 182:	2a 9a       	sbi	0x05, 2	; 5
			SHIFT_PORT &= ~LATCH;	
 184:	2a 98       	cbi	0x05, 2	; 5
			
			SPDR0 = SEGMENT_MAP[adc_value /10];        //This should light alternating LEDs
 186:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 18a:	ec 9f       	mul	r30, r28
 18c:	e1 2d       	mov	r30, r1
 18e:	11 24       	eor	r1, r1
 190:	e6 95       	lsr	r30
 192:	e6 95       	lsr	r30
 194:	e6 95       	lsr	r30
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
 1a0:	0d b4       	in	r0, 0x2d	; 45
 1a2:	07 fe       	sbrs	r0, 7
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <main+0x82>
			
			//Shift in some more data since I have two shift registers hooked up
			SPDR0 = 0xF4;        //This should light alternating LEDs
 1a6:	0e bd       	out	0x2e, r16	; 46
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
 1a8:	0d b4       	in	r0, 0x2d	; 45
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0x8a>
			
			//Toggle latch to copy data to the storage register
			SHIFT_PORT |= LATCH;
 1ae:	2a 9a       	sbi	0x05, 2	; 5
			SHIFT_PORT &= ~LATCH;
 1b0:	2a 98       	cbi	0x05, 2	; 5
			
			SPDR0 = SEGMENT_MAP[adc_value /100];        //This should light alternating LEDs
 1b2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1b6:	e1 9f       	mul	r30, r17
 1b8:	e1 2d       	mov	r30, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	e2 95       	swap	r30
 1be:	ef 70       	andi	r30, 0x0F	; 15
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
 1ca:	0d b4       	in	r0, 0x2d	; 45
 1cc:	07 fe       	sbrs	r0, 7
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <main+0xac>
			
			//Shift in some more data since I have two shift registers hooked up
			SPDR0 = 0xF2;        //This should light alternating LEDs
 1d0:	de bd       	out	0x2e, r29	; 46
			//Wait for SPI process to finish
			while(!(SPSR0 & (1<<SPIF)));
 1d2:	0d b4       	in	r0, 0x2d	; 45
 1d4:	07 fe       	sbrs	r0, 7
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <main+0xb4>
			
			//Toggle latch to copy data to the storage register
			SHIFT_PORT |= LATCH;
 1d8:	2a 9a       	sbi	0x05, 2	; 5
			SHIFT_PORT &= ~LATCH;
 1da:	2a 98       	cbi	0x05, 2	; 5
		//Loop forever
	}
 1dc:	ae cf       	rjmp	.-164    	; 0x13a <main+0x1c>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
